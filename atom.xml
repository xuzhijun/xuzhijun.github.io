<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>徐记</title>
  
  <subtitle>简不单</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://xuzhijun.github.io/"/>
  <updated>2017-12-26T13:02:13.558Z</updated>
  <id>http://xuzhijun.github.io/</id>
  
  <author>
    <name>bell</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Webpack 配置笔记</title>
    <link href="http://xuzhijun.github.io/2017/08/06/javascript-webpack-entry/"/>
    <id>http://xuzhijun.github.io/2017/08/06/javascript-webpack-entry/</id>
    <published>2017-08-05T16:00:00.000Z</published>
    <updated>2017-12-26T13:02:13.558Z</updated>
    
    <content type="html"><![CDATA[<h2 id="entry"><a href="#entry" class="headerlink" title="entry"></a>entry</h2><h4 id="单入口场景："><a href="#单入口场景：" class="headerlink" title="单入口场景："></a>单入口场景：</h4><p>entry: <strong><em>string|Array<string></string></em></strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    main: <span class="string">'./path/to/my/entry/file.js'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 简写</span></span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  entry: <span class="string">'./path/to/my/entry/file.js'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = config;</span><br></pre></td></tr></table></figure><p>向 entry 属性传入「文件路径(file path)数组」将创建“多个主入口(multi-main entry)”。</p><p>传入数组这种方式有助于，在你想要<strong>多个依赖文件一起注入</strong>，并且将它们的依赖<strong>导向到一个“chunk”时</strong>。</p><h4 id="多入口场景："><a href="#多入口场景：" class="headerlink" title="多入口场景："></a>多入口场景：</h4><p>entry: {[entryChunkName: string]: string|Array<string>}</string></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    app: <span class="string">'./src/app.js'</span>,</span><br><span class="line">    vendors: <span class="string">'./src/vendors.js'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;entry&quot;&gt;&lt;a href=&quot;#entry&quot; class=&quot;headerlink&quot; title=&quot;entry&quot;&gt;&lt;/a&gt;entry&lt;/h2&gt;&lt;h4 id=&quot;单入口场景：&quot;&gt;&lt;a href=&quot;#单入口场景：&quot; class=&quot;headerlink&quot; title=&quot;单
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://xuzhijun.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://xuzhijun.github.io/tags/JavaScript/"/>
    
      <category term="Webpack" scheme="http://xuzhijun.github.io/tags/Webpack/"/>
    
  </entry>
  
  <entry>
    <title>Vuex是什么？</title>
    <link href="http://xuzhijun.github.io/2017/06/06/vue-learning-vuex/"/>
    <id>http://xuzhijun.github.io/2017/06/06/vue-learning-vuex/</id>
    <published>2017-06-05T16:00:00.000Z</published>
    <updated>2017-12-26T12:59:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>###Vuex是什么？<br>global event bus 和 Vuex 的选择。</p><p>###开始</p><p>不能直接改变 store 中的状态。改变 store 中的状态的唯一途径就是显式地提交(commit) mutations。<br>我们通过提交 mutation 的方式，而非直接改变 store.state.count，是因为我们想要更明确地追踪到状态的变化。</p><p>由于 store 中的状态是响应式的，在组件中调用 store 中的状态简单到仅需要在计算属性中返回即可。</p><p>###核心概念</p><p>####state 和 mapState 辅助函数</p><p>#####在 Vue 组件中获得 Vuex 状态</p><p>由于 Vuex 的状态存储是响应式的，从 store 实例中读取状态最简单的方法就是在计算属性中返回某个状态：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个 Counter 组件</span></span><br><span class="line"><span class="keyword">const</span> Counter = &#123;</span><br><span class="line">  template: <span class="string">`&lt;div&gt;&#123;&#123; count &#125;&#125;&lt;/div&gt;`</span>,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    count () &#123;</span><br><span class="line">      <span class="keyword">return</span> store.state.count</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每当 store.state.count 变化的时候, 都会重新求取计算属性，并且触发更新相关联的 DOM。然而，这种模式导致组件依赖全局状态单例。</p><p>Vuex 通过 store 选项，提供了一种机制将状态从根组件“注入”到每一个子组件中（需调用 Vue.use(Vuex)）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  <span class="comment">// 把 store 对象提供给 “store” 选项，这可以把 store 的实例注入所有的子组件</span></span><br><span class="line">  store,</span><br><span class="line">  components: &#123; Counter &#125;,</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div class="app"&gt;</span></span><br><span class="line"><span class="string">      &lt;counter&gt;&lt;/counter&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>通过在根实例中注册 store 选项，该 store 实例会注入到根组件下的所有子组件中，且子组件能通过 this.$store 访问到。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Counter = &#123;</span><br><span class="line">  template: <span class="string">`&lt;div&gt;&#123;&#123; count &#125;&#125;&lt;/div&gt;`</span>,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    count () &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.$store.state.count</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>#####mapState 辅助函数</p><p>使用<strong>对象展开运算符</strong>和mapState 函数，可以很方便的将多个对象合并为一个，并传给 computed 属性。</p><h5 id="组件仍然保有局部状态"><a href="#组件仍然保有局部状态" class="headerlink" title="组件仍然保有局部状态"></a>组件仍然保有局部状态</h5><p>使用 Vuex 并不意味着你需要将所有的状态放入 Vuex。如果有些状态严格属于单个组件，最好还是作为组件的局部状态。</p><h4 id="Getter-和-mapGetters-辅助函数"><a href="#Getter-和-mapGetters-辅助函数" class="headerlink" title="Getter 和 mapGetters 辅助函数"></a>Getter 和 mapGetters 辅助函数</h4><h4 id="Mutation-和-mapMutations-辅助函数"><a href="#Mutation-和-mapMutations-辅助函数" class="headerlink" title="Mutation 和 mapMutations 辅助函数"></a>Mutation 和 mapMutations 辅助函数</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;###Vuex是什么？&lt;br&gt;global event bus 和 Vuex 的选择。&lt;/p&gt;
&lt;p&gt;###开始&lt;/p&gt;
&lt;p&gt;不能直接改变 store 中的状态。改变 store 中的状态的唯一途径就是显式地提交(commit) mutations。&lt;br&gt;我们通过提交 
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://xuzhijun.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://xuzhijun.github.io/tags/JavaScript/"/>
    
      <category term="Vue" scheme="http://xuzhijun.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>CSS 揭秘 - 第一章，引言</title>
    <link href="http://xuzhijun.github.io/2017/02/24/css-secrets-chap1/"/>
    <id>http://xuzhijun.github.io/2017/02/24/css-secrets-chap1/</id>
    <published>2017-02-24T08:00:00.000Z</published>
    <updated>2017-02-24T08:07:26.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一，浏览器前缀的自动化"><a href="#一，浏览器前缀的自动化" class="headerlink" title="一，浏览器前缀的自动化"></a>一，浏览器前缀的自动化</h3><p>1）<a href="https://github.com/postcss/autoprefixer" target="_blank" rel="external">Autoprefixer</a></p><p>2）<a href="https://github.com/LeaVerou/prefixfree" target="_blank" rel="external">prefixfree</a></p><p>3）Stylus, LESS, SASS 的 Mixin</p><h3 id="二，CSS-编码技巧"><a href="#二，CSS-编码技巧" class="headerlink" title="二，CSS 编码技巧"></a>二，CSS 编码技巧</h3><h4 id="写可维护性高的组件（可维护性高意味着尽量减少改动时要编辑的地方）"><a href="#写可维护性高的组件（可维护性高意味着尽量减少改动时要编辑的地方）" class="headerlink" title="写可维护性高的组件（可维护性高意味着尽量减少改动时要编辑的地方）"></a>写可维护性高的组件（<strong>可维护性高意味着尽量减少改动时要编辑的地方</strong>）</h4><p>在写CSS组件时，<strong>可维护性</strong>和<strong>可扩展性</strong>都是必须要考虑的事情，然后就产生了属性之间的依赖性。</p><p>比如：</p><p>1）组件内 font-size 和 line-height 的依赖性，</p><p>2） em单位和rem单位，分别对父节点和根结点中 font-size 的依赖性。</p><p>在考虑扩展性时，我们需要审视哪些效果应该跟着一起改变，而哪些效果保持不变。</p><p><strong>举例：</strong>几个css框架中，对于按钮组件不同的写法</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* bootstrap v4 */</span></span><br><span class="line"><span class="selector-class">.btn</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">font-weight</span>: normal;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1.25</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">  <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">  <span class="attribute">-webkit-user-select</span>: none;</span><br><span class="line">     <span class="attribute">-moz-user-select</span>: none;</span><br><span class="line">      <span class="attribute">-ms-user-select</span>: none;</span><br><span class="line">          <span class="attribute">user-select</span>: none;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid transparent;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0.5rem</span> <span class="number">1rem</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1rem</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">0.25rem</span>;</span><br><span class="line">  <span class="attribute">-webkit-transition</span>: all <span class="number">0.2s</span> ease-in-out;</span><br><span class="line">  <span class="attribute">-o-transition</span>: all <span class="number">0.2s</span> ease-in-out;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">0.2s</span> ease-in-out;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* semantic ui */</span></span><br><span class="line"><span class="selector-class">.ui</span><span class="selector-class">.button</span> &#123;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">min-height</span>: <span class="number">1em</span>;</span><br><span class="line">  <span class="attribute">outline</span>: none;</span><br><span class="line">  <span class="attribute">border</span>: none;</span><br><span class="line">  <span class="attribute">vertical-align</span>: baseline;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#E0E1E2</span> none;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">rgba</span>(0, 0, 0, 0.6);</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">'Lato'</span>, <span class="string">'Helvetica Neue'</span>, Arial, Helvetica, sans-serif;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0em</span> <span class="number">0.25em</span> <span class="number">0em</span> <span class="number">0em</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0.78571429em</span> <span class="number">1.5em</span> <span class="number">0.78571429em</span>;</span><br><span class="line">  <span class="attribute">text-transform</span>: none;</span><br><span class="line">  <span class="attribute">text-shadow</span>: none;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1em</span>;</span><br><span class="line">  <span class="attribute">font-style</span>: normal;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">0.28571429rem</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0px</span> <span class="number">0px</span> <span class="number">0px</span> <span class="number">1px</span> transparent inset, <span class="number">0px</span> <span class="number">0em</span> <span class="number">0px</span> <span class="number">0px</span> <span class="built_in">rgba</span>(34, 36, 38, 0.15) inset;</span><br><span class="line">  <span class="attribute">-webkit-user-select</span>: none;</span><br><span class="line">     <span class="attribute">-moz-user-select</span>: none;</span><br><span class="line">      <span class="attribute">-ms-user-select</span>: none;</span><br><span class="line">          <span class="attribute">user-select</span>: none;</span><br><span class="line">  <span class="attribute">-webkit-transition</span>: opacity <span class="number">0.1s</span> ease, background-color <span class="number">0.1s</span> ease, color <span class="number">0.1s</span> ease, box-shadow <span class="number">0.1s</span> ease, background <span class="number">0.1s</span> ease;</span><br><span class="line">  <span class="attribute">transition</span>: opacity <span class="number">0.1s</span> ease, background-color <span class="number">0.1s</span> ease, color <span class="number">0.1s</span> ease, box-shadow <span class="number">0.1s</span> ease, background <span class="number">0.1s</span> ease;</span><br><span class="line">  <span class="attribute">will-change</span>: <span class="string">''</span>;</span><br><span class="line">  <span class="attribute">-webkit-tap-highlight-color</span>: transparent;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* bluma */</span></span><br><span class="line"><span class="selector-class">.button</span> &#123;</span><br><span class="line">  <span class="attribute">-moz-appearance</span>: none;</span><br><span class="line">  <span class="attribute">-webkit-appearance</span>: none;</span><br><span class="line">  <span class="attribute">-webkit-box-align</span>: center;</span><br><span class="line">      <span class="attribute">-ms-flex-align</span>: center;</span><br><span class="line">          <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">border</span>: none;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: none;</span><br><span class="line">  <span class="attribute">display</span>: -webkit-inline-box;</span><br><span class="line">  <span class="attribute">display</span>: -ms-inline-flexbox;</span><br><span class="line">  <span class="attribute">display</span>: inline-flex;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1rem</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">2.285em</span>;</span><br><span class="line">  <span class="attribute">-webkit-box-pack</span>: start;</span><br><span class="line">      <span class="attribute">-ms-flex-pack</span>: start;</span><br><span class="line">          <span class="attribute">justify-content</span>: flex-start;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1.5</span>;</span><br><span class="line">  <span class="attribute">padding-left</span>: <span class="number">0.75em</span>;</span><br><span class="line">  <span class="attribute">padding-right</span>: <span class="number">0.75em</span>;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">vertical-align</span>: top;</span><br><span class="line">  <span class="attribute">-webkit-touch-callout</span>: none;</span><br><span class="line">  <span class="attribute">-webkit-user-select</span>: none;</span><br><span class="line">  <span class="attribute">-moz-user-select</span>: none;</span><br><span class="line">  <span class="attribute">-ms-user-select</span>: none;</span><br><span class="line">  <span class="attribute">user-select</span>: none;</span><br><span class="line">  <span class="attribute">background-color</span>: white;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#dbdbdb</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#363636</span>;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">  <span class="attribute">-webkit-box-pack</span>: center;</span><br><span class="line">      <span class="attribute">-ms-flex-pack</span>: center;</span><br><span class="line">          <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">padding-left</span>: <span class="number">0.75em</span>;</span><br><span class="line">  <span class="attribute">padding-right</span>: <span class="number">0.75em</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>小技巧：</strong></p><p>1）把半透明的黑色或者白色叠加在主色调上，即可产生主色调的亮色和暗色变体。这个技巧可以解决扩展后在不同颜色中，实现该颜色的亮色和暗色变体的需求。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* button */</span></span><br><span class="line"><span class="selector-class">.button</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#58a</span> <span class="built_in">linear-gradient</span>(hsla(0, 0%, 100%, .2), transparent);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.button</span><span class="selector-class">.cancel</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#c00</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.button</span><span class="selector-class">.ok</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#6b0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="currentColor和inherit"><a href="#currentColor和inherit" class="headerlink" title="currentColor和inherit"></a>currentColor和inherit</h4><p>currentColor是CSS有史以来的第一个变量。未来，在原生CSS中拥有处理颜色的函数后，currentColor就会变得更加有用。可以用这些函数来产生其各种深浅明暗的变体。</p><p>inherit可以用在任何CSS属性中，默认是绑定到父元素的计算值，伪元素中则会取生成该伪元素的宿主元素。</p><h3 id="三，响应式网页设计"><a href="#三，响应式网页设计" class="headerlink" title="三，响应式网页设计"></a>三，响应式网页设计</h3><h4 id="思考："><a href="#思考：" class="headerlink" title="思考："></a>思考：</h4><p>怎样才能做好响应式？</p><p>通常，我们会通过媒体查询（Media Query）规则来修补网站在各个分辨率下出现的问题。<br>然而，对于今后CSS的改动来说，<strong>每个媒体查询都会增加成本</strong>。</p><p>媒体查询不能以一种连续的方式来修复问题，它们的工作原理基于某几个特定的阶梯（亦称为“断点”），<br>并且，<strong>媒体查询的断点不应该由具体的设备来决定</strong>，而应该根据设计自身来决定。</p><p>遵从<strong>尽量减少代码重复</strong>的原则。</p><h4 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h4><p>1）网站的大部分样式代码以弹性的方式去编写，然后当把媒体查询作为最后的手段（实现弹性可伸缩的布局，并在媒体查询的各个断点区间内指定相应的尺寸）。</p><p>2）在较大或者较小的视口下完全改变网站的设计形态。</p><h4 id="建议："><a href="#建议：" class="headerlink" title="建议："></a>建议：</h4><p>1）使用百分比长度来取代固定长度，或者尝试使用与视口相关的单位（vw、vh、vmin、vmax），他们的值解析为视口宽度或高度的百分比。</p><p>2）当需要在较大分辨率下得到固定宽度时，使用 <strong>max-width</strong> 而不是 width，因为它可以适应较小的分辨率，而无需使用媒体查询。</p><p>3）为替换元素（比如img、object、video、iframe等）设置 <strong>max-width: 100%</strong>。</p><p>4）使用 background-size: cover 可以使背景图片完整铺满一个容器，<strong>但在移动网页中不建议把大图缩小显示</strong>。</p><p>5）当图片（或其他元素）以行列式进行布局时，让视口的宽度来决定列的数量。<br>Flexbox 布局或者 display:inline-block 加上常规的文本折行行为，都可以实现这一点。</p><h3 id="四，合理使用简写"><a href="#四，合理使用简写" class="headerlink" title="四，合理使用简写"></a>四，合理使用简写</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 以下两行 CSS 代码并不是等价的： */</span></span><br><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">rebeccapurple</span>;</span><br><span class="line"><span class="selector-tag">background-color</span>: <span class="selector-tag">rebeccapurple</span>;</span><br></pre></td></tr></table></figure><p>因为同时可能会有一条 background-image 声明在起作用，展开式写法并不会帮助你清空所有相关的其他属性，从而可能会干扰你想要达到的效果。</p><p>合理使用简写是一种良好的防卫性编码方式，可以抵御未来的风险。</p><p>如果我们要明确地去覆盖某个具体的展开式属性并保留其他相关样式，那就需要用展开式属性。</p><p>CSS的“<strong>列表扩展规则</strong>”中提到，<strong>如果只为某个属性提供一个值，那它就会扩散并应用到列表中的每一项</strong>。<br>因此，我们可以把这些重复的值从简写属性中抽出来写成一个展开式属性。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">url</span>(<span class="selector-tag">tr</span><span class="selector-class">.png</span>) <span class="selector-tag">top</span> <span class="selector-tag">right</span>, <span class="selector-tag">url</span>(<span class="selector-tag">br</span><span class="selector-class">.png</span>) <span class="selector-tag">bottom</span> <span class="selector-tag">right</span>, <span class="selector-tag">url</span>(<span class="selector-tag">bl</span><span class="selector-class">.png</span>) <span class="selector-tag">bottom</span> <span class="selector-tag">left</span>;</span><br><span class="line"><span class="selector-tag">background-size</span>: 2<span class="selector-tag">em</span> 2<span class="selector-tag">em</span>;</span><br><span class="line"><span class="selector-tag">background-repeat</span>: <span class="selector-tag">no-repeat</span>;</span><br></pre></td></tr></table></figure><h3 id="五，预处理器"><a href="#五，预处理器" class="headerlink" title="五，预处理器"></a>五，预处理器</h3><p>很多受预处理器启发的特性都已经以各种方式融入到原生 CSS 中了。</p><p>比如：<a href="https://drafts.csswg.org/css-variables/" target="_blank" rel="external">CSS自定义属性暨层叠式变量</a>，<a href="https://www.w3.org/TR/css3-values/#calc-notation" target="_blank" rel="external">calc() 函数</a>，<a href="https://drafts.csswg.org/css-color/" target="_blank" rel="external">color() 函数</a> 等。这些原生特性通常比预处理器提供的版本要更强大，因为<strong>他们是动态的</strong>。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ul</span> &#123;</span><br><span class="line">  <span class="attribute">--accent-color</span>: purple;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">ol</span> &#123;</span><br><span class="line">  <span class="attribute">--accent-color</span>: rebeccapurple;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">li</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">var</span>(--accent-color);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个例子的重点在于向你展示CSS的原生变量所具备的动态性。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一，浏览器前缀的自动化&quot;&gt;&lt;a href=&quot;#一，浏览器前缀的自动化&quot; class=&quot;headerlink&quot; title=&quot;一，浏览器前缀的自动化&quot;&gt;&lt;/a&gt;一，浏览器前缀的自动化&lt;/h3&gt;&lt;p&gt;1）&lt;a href=&quot;https://github.com/post
      
    
    </summary>
    
      <category term="CSS" scheme="http://xuzhijun.github.io/categories/CSS/"/>
    
    
      <category term="CSS" scheme="http://xuzhijun.github.io/tags/CSS/"/>
    
      <category term="CSS3" scheme="http://xuzhijun.github.io/tags/CSS3/"/>
    
  </entry>
  
  <entry>
    <title>读《Javascript模块化编程系列 - 阮一峰》</title>
    <link href="http://xuzhijun.github.io/2017/02/22/javascript-module/"/>
    <id>http://xuzhijun.github.io/2017/02/22/javascript-module/</id>
    <published>2017-02-22T08:00:00.000Z</published>
    <updated>2017-03-03T09:18:41.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://www.ruanyifeng.com/blog/2012/10/javascript_module.html" target="_blank" rel="external">Javascript模块化编程（一）：模块的写法</a></p><h4 id="模块的演变"><a href="#模块的演变" class="headerlink" title="模块的演变"></a>模块的演变</h4><p>从<strong>全局函数</strong>，到<strong>对象</strong>，再演到<strong>立即执行函数(IIFE)</strong>返回的闭包。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> module1 = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="keyword">var</span> _count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">　<span class="keyword">var</span> m1 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">　    <span class="comment">//...</span></span><br><span class="line">　&#125;;</span><br><span class="line">　<span class="keyword">var</span> m2 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">　　<span class="comment">//...</span></span><br><span class="line">　&#125;;</span><br><span class="line"></span><br><span class="line">　<span class="keyword">return</span> &#123;</span><br><span class="line">　　m1 : m1,</span><br><span class="line">　　m2 : m2</span><br><span class="line">　&#125;;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h4 id="模块的继承"><a href="#模块的继承" class="headerlink" title="模块的继承"></a>模块的继承</h4><p><strong>放大模式</strong>和<strong>宽放大模式</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//放大模式</span></span><br><span class="line"><span class="keyword">var</span> module1 = (<span class="function"><span class="keyword">function</span> (<span class="params">mod</span>)</span>&#123;</span><br><span class="line">  mod.m3 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> mod;</span><br><span class="line">&#125;)(module1);</span><br><span class="line"></span><br><span class="line"><span class="comment">//宽放大模式</span></span><br><span class="line"><span class="keyword">var</span> module1 = ( <span class="function"><span class="keyword">function</span> (<span class="params">mod</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  <span class="keyword">return</span> mod;</span><br><span class="line">&#125;)(<span class="built_in">window</span>.module1 || &#123;&#125;);</span><br></pre></td></tr></table></figure><p>与<strong>放大模式</strong>相比，<strong>宽放大模式</strong>就是<strong>立即执行函数</strong>的参数可以是空对象。</p><h4 id="模块的独立性"><a href="#模块的独立性" class="headerlink" title="模块的独立性"></a>模块的独立性</h4><p><strong>独立性</strong>是模块的重要特点，模块内部最好不与程序的其他部分直接交互。</p><p>为了在模块内部调用全局变量，<strong>必须显式地将其他变量输入模块</strong>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> module1 = (<span class="function"><span class="keyword">function</span> (<span class="params">$, YAHOO</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;)(jQuery, YAHOO);</span><br></pre></td></tr></table></figure><p><a href="http://www.ruanyifeng.com/blog/2012/10/asynchronous_module_definition.html" target="_blank" rel="external">Javascript模块化编程（二）：AMD规范</a></p><p>目前，通行的Javascript模块规范共有两种：<a href="http://wiki.commonjs.org/wiki/Modules/1.1" target="_blank" rel="external">CommonJS</a>和<a href="https://github.com/amdjs/amdjs-api/wiki/AMD" target="_blank" rel="external">AMD</a>。</p><h4 id="CommonJS"><a href="#CommonJS" class="headerlink" title="CommonJS"></a>CommonJS</h4><p>node.js的模块系统，就是参照CommonJS规范实现的。在CommonJS中，有一个全局性方法require()，用于加载模块。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> math = <span class="built_in">require</span>(<span class="string">'math'</span>);</span><br><span class="line">math.add(<span class="number">2</span>,<span class="number">3</span>); <span class="comment">// 5</span></span><br></pre></td></tr></table></figure><p>但是，由于一个<strong>重大的局限(同步加载)</strong>，使得CommonJS规范不适用于浏览器环境。</p><p><strong>浏览器端的模块</strong>，不能采用”同步加载”（synchronous），只能采用”异步加载”（asynchronous）。<br>这就是AMD规范诞生的背景。</p><h4 id="AMD"><a href="#AMD" class="headerlink" title="AMD"></a>AMD</h4><p>AMD是”Asynchronous Module Definition”的缩写，意思就是”异步模块定义”。</p><p>它采用异步方式加载模块，模块的加载不影响它后面语句的运行。<br>所有依赖这个模块的语句，都定义在一个回调函数中，等到加载完成之后，这个回调函数才会运行。</p><p>AMD也采用require()语句加载模块，但是不同于CommonJS，它要求两个参数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>([<span class="string">'math'</span>], <span class="function"><span class="keyword">function</span> (<span class="params">math</span>) </span>&#123;</span><br><span class="line">  math.add(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>第一个参数<strong>[module]</strong>，是一个数组，里面的成员就是要加载的模块；<br>第二个参数<strong>callback</strong>，则是加载成功之后的回调函数。</p><p><a href="http://www.ruanyifeng.com/blog/2012/11/require_js.html" target="_blank" rel="external">Javascript模块化编程（三）：require.js的用法</a></p><h4 id="依次加载多个js文件的缺点"><a href="#依次加载多个js文件的缺点" class="headerlink" title="依次加载多个js文件的缺点"></a>依次加载多个js文件的缺点</h4><p>首先，加载的时候，浏览器会停止网页渲染，加载文件越多，网页失去响应的时间就会越长；</p><p>其次，由于js文件之间存在依赖关系，因此必须严格保证加载顺序，依赖性最大的模块一定要放到最后加载，当依赖关系很复杂的时候，代码的编写和维护都会变得困难。</p><p>require.js的诞生，就是为了解决这两个问题：</p><p>1，实现js文件的异步加载，避免网页失去响应；</p><p>2，管理模块之间的依赖性，便于代码的编写和维护。</p><h4 id="require-js的加载"><a href="#require-js的加载" class="headerlink" title="require.js的加载"></a>require.js的加载</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/require.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--异步加载--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/require.js"</span> <span class="attr">defer</span> <span class="attr">async</span>=<span class="string">"true"</span> &gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--指定主模块--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/require.js"</span> <span class="attr">data-main</span>=<span class="string">"js/main"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="主模块的写法"><a href="#主模块的写法" class="headerlink" title="主模块的写法"></a>主模块的写法</h4><p>require()函数接受两个参数。</p><p>第一个参数是一个数组，表示所依赖的模块，即主模块依赖这三个模块；</p><p>第二个参数是一个回调函数，当前面指定的模块都加载成功后，它将被调用。加载的模块会以参数形式传入该函数，从而在回调函数内部就可以使用这些模块。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>([<span class="string">'jquery'</span>, <span class="string">'underscore'</span>, <span class="string">'backbone'</span>], <span class="function"><span class="keyword">function</span> (<span class="params">$, _, Backbone</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// some code here</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="模块的加载"><a href="#模块的加载" class="headerlink" title="模块的加载"></a>模块的加载</h4><p>使用require.config()方法，我们可以对模块的加载行为进行自定义。</p><p>require.config()就写在主模块（main.js）的头部。<br>参数就是一个对象，这个对象的paths属性指定各个模块的加载路径。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//路径默认与main.js在同一个目录</span></span><br><span class="line"><span class="built_in">require</span>.config(&#123;</span><br><span class="line">  paths: &#123;</span><br><span class="line">    <span class="string">"jquery"</span>: <span class="string">"jquery.min"</span>,</span><br><span class="line">    <span class="string">"underscore"</span>: <span class="string">"underscore.min"</span>,</span><br><span class="line">    <span class="string">"backbone"</span>: <span class="string">"backbone.min"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//在其他目录有两种写法</span></span><br><span class="line"><span class="built_in">require</span>.config(&#123;</span><br><span class="line">  paths: &#123;</span><br><span class="line">    <span class="string">"jquery"</span>: <span class="string">"lib/jquery.min"</span>,</span><br><span class="line">    <span class="string">"underscore"</span>: <span class="string">"lib/underscore.min"</span>,</span><br><span class="line">    <span class="string">"backbone"</span>: <span class="string">"lib/backbone.min"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">require</span>.config(&#123;</span><br><span class="line">  baseUrl: <span class="string">"js/lib"</span>,</span><br><span class="line">  paths: &#123;</span><br><span class="line">    <span class="string">"jquery"</span>: <span class="string">"jquery.min"</span>,</span><br><span class="line">    <span class="string">"underscore"</span>: <span class="string">"underscore.min"</span>,</span><br><span class="line">    <span class="string">"backbone"</span>: <span class="string">"backbone.min"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//直接指定网址</span></span><br><span class="line"><span class="built_in">require</span>.config(&#123;</span><br><span class="line">  paths: &#123;</span><br><span class="line">    <span class="string">"jquery"</span>: <span class="string">"https://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>require.js要求，每个模块是一个单独的js文件。这样的话，如果加载多个模块，就会发出多次HTTP请求，会影响网页的加载速度。因此，require.js提供了一个<a href="http://requirejs.org/docs/optimization.html" target="_blank" rel="external">优化工具</a>，当模块部署完毕以后，可以用这个工具将多个模块合并在一个文件中，减少HTTP请求数。</p><h4 id="AMD模块的写法"><a href="#AMD模块的写法" class="headerlink" title="AMD模块的写法"></a>AMD模块的写法</h4><p>require.js加载的模块，采用AMD规范，必须按照AMD的规定来写。</p><p>模块必须采用特定的define()函数来定义。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如果一个模块不依赖其他模块，那么可以直接定义在define()函数之中。</span></span><br><span class="line">define(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> add = <span class="function"><span class="keyword">function</span> (<span class="params">x,y</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x+y;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    add: add</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//加载方法</span></span><br><span class="line"><span class="built_in">require</span>([<span class="string">'math'</span>], <span class="function"><span class="keyword">function</span> (<span class="params">math</span>)</span>&#123;</span><br><span class="line">  alert(math.add(<span class="number">1</span>,<span class="number">1</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果这个模块还依赖其他模块，那么define()函数的第一个参数，必须是一个数组，指明该模块的依赖性。</span></span><br><span class="line">define([<span class="string">'myLib'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">myLib</span>)</span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    myLib.doSomething();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    foo : foo</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//当require()函数加载上面这个模块的时候，就会先加载myLib.js文件。</span></span><br></pre></td></tr></table></figure><h4 id="加载非规范的模块"><a href="#加载非规范的模块" class="headerlink" title="加载非规范的模块"></a>加载非规范的模块</h4><p>非规范的模块在用require()加载之前，要先用require.config()方法，定义它们的一些特征。</p><p><strong>shim属性</strong>专门用来配置不兼容的模块。</p><p>exports值：输出的变量名，表明这个模块外部调用时的名称；</p><p>deps数组：表明该模块的依赖性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>.config(&#123;</span><br><span class="line">  shim: &#123;</span><br><span class="line">    <span class="string">'underscore'</span>:&#123;</span><br><span class="line">      exports: <span class="string">'_'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'backbone'</span>: &#123;</span><br><span class="line">      deps: [<span class="string">'underscore'</span>, <span class="string">'jquery'</span>],</span><br><span class="line">      exports: <span class="string">'Backbone'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//jQuery的插件可以这样定义</span></span><br><span class="line"><span class="built_in">require</span>.config(&#123;</span><br><span class="line">  shim: &#123;</span><br><span class="line">    <span class="string">'jquery.scroll'</span>: &#123;</span><br><span class="line">      deps: [<span class="string">'jquery'</span>],</span><br><span class="line">      exports: <span class="string">'jQuery.fn.scroll'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="require-js插件"><a href="#require-js插件" class="headerlink" title="require.js插件"></a>require.js插件</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//domready插件，可以让回调函数在页面DOM结构加载完成后再运行。</span></span><br><span class="line"><span class="built_in">require</span>([<span class="string">'domready!'</span>], <span class="function"><span class="keyword">function</span> (<span class="params">doc</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// called once the DOM is ready</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//text和image插件，则是允许require.js加载文本和图片文件。</span></span><br><span class="line">define([<span class="string">'text!review.txt'</span>, <span class="string">'image!cat.jpg'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">review,cat</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(review);</span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(cat);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>类似的插件还有json和mdown，用于加载json文件和markdown文件。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2012/10/javascript_module.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Javascript模块化编程（一）：模块的写法&lt;/a&gt;&lt;/p&gt;
&lt;
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://xuzhijun.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://xuzhijun.github.io/tags/JavaScript/"/>
    
      <category term="JavaScript 模块化" scheme="http://xuzhijun.github.io/tags/JavaScript-%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>CSS 揭秘 - 第二章，背景与边框</title>
    <link href="http://xuzhijun.github.io/2016/12/14/css-secrets-chap2/"/>
    <id>http://xuzhijun.github.io/2016/12/14/css-secrets-chap2/</id>
    <published>2016-12-14T08:00:00.000Z</published>
    <updated>2017-12-26T12:51:13.004Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一，半透明边框和背景色的问题"><a href="#一，半透明边框和背景色的问题" class="headerlink" title="一，半透明边框和背景色的问题"></a>一，半透明边框和背景色的问题</h3><h4 id="1，background-clip-方案"><a href="#1，background-clip-方案" class="headerlink" title="1，background-clip 方案"></a>1，<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/background-clip" target="_blank" rel="external">background-clip</a> 方案</h4><p><strong>border-box：</strong>背景延伸到边框外沿（但是在边框之下）。</p><p><strong>padding-box：</strong>边框下面没有背景，即背景延伸到内边距外沿。</p><p><strong>content-box：</strong>背景裁剪到内容区外沿。</p><p><strong>text：</strong><a href="https://drafts.csswg.org/css-backgrounds-4/#background-clip" target="_blank" rel="external">css-backgrounds-4</a> 中为 background-clip 加入了值 text，意为仅给文字添加背景。（<a href="https://jsfiddle.net/c3p74zuo/3/" target="_blank" rel="external">例子</a>）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Keyword values */</span></span><br><span class="line"><span class="selector-tag">background-clip</span>: <span class="selector-tag">border-box</span>;</span><br><span class="line"><span class="selector-tag">background-clip</span>: <span class="selector-tag">padding-box</span>;</span><br><span class="line"><span class="selector-tag">background-clip</span>: <span class="selector-tag">content-box</span>;</span><br><span class="line"><span class="selector-tag">background-clip</span>: <span class="selector-tag">text</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Global values */</span></span><br><span class="line"><span class="selector-tag">background-clip</span>: <span class="selector-tag">inherit</span>;</span><br><span class="line"><span class="selector-tag">background-clip</span>: <span class="selector-tag">initial</span>;</span><br><span class="line"><span class="selector-tag">background-clip</span>: <span class="selector-tag">unset</span>;</span><br></pre></td></tr></table></figure><h3 id="二，多重边框的解决方案"><a href="#二，多重边框的解决方案" class="headerlink" title="二，多重边框的解决方案"></a>二，多重边框的解决方案</h3><h4 id="1，box-shadow-投影方案（可创建多重实线边框）"><a href="#1，box-shadow-投影方案（可创建多重实线边框）" class="headerlink" title="1，box-shadow 投影方案（可创建多重实线边框）"></a>1，<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/box-shadow" target="_blank" rel="external">box-shadow</a> 投影方案（可创建多重实线边框）</h4><p>利用 box-shadow 支持逗号分隔语法，可以创建任意数量的投影。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">yellowgreen</span>;</span><br><span class="line"><span class="selector-tag">box-shadow</span>: 0 0 0 10<span class="selector-tag">px</span> <span class="selector-id">#655</span>, 0 0 0 15<span class="selector-tag">px</span> <span class="selector-tag">deeppink</span>;</span><br></pre></td></tr></table></figure><p>唯一需要注意的是，<strong>box-shadow 是层层叠加的，第一层投影位于最顶层</strong>，以此类推。</p><h5 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h5><p>1）box-shadow 不会影响布局，不会受到 box-sizing 属性的影响，可以通过 padding 或 margin 来额外模拟出边框所需要占据的空间。</p><p>2）出现在元素外圈的 box-shadow 不会响应鼠标事件，可以给 box-shadow 属性加上 inset 关键字，再增加额外的 padding 来解决。</p><h4 id="2，outline-描边方案（配合原有的-border，可创建虚实线双重直角边框）"><a href="#2，outline-描边方案（配合原有的-border，可创建虚实线双重直角边框）" class="headerlink" title="2，outline 描边方案（配合原有的 border，可创建虚实线双重直角边框）"></a>2，<a href="">outline</a> 描边方案（配合原有的 border，可创建虚实线双重直角边框）</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">yellowgreen</span>;</span><br><span class="line"><span class="selector-tag">border</span>: 10<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#655</span>;</span><br><span class="line"><span class="selector-tag">outline</span>: 5<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-tag">deeppink</span>;</span><br></pre></td></tr></table></figure><h5 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h5><p>1）可以通过 outline-offset 属性来控制它与元素边缘之间的间距，可以接受负值。</p><h5 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h5><p>1）outline 只适用于双层“边框”的场景，因其并不能接受用逗号分隔的多个值。</p><p>2）描边不一定会贴合 border-radius 属性产生的圆角。</p><p>3）描边可以不是矩形，需要在不同浏览器中测试最终效果。</p><h3 id="三，灵活的背景定位"><a href="#三，灵活的背景定位" class="headerlink" title="三，灵活的背景定位"></a>三，灵活的背景定位</h3><h4 id="1，background-position-的扩展语法方案"><a href="#1，background-position-的扩展语法方案" class="headerlink" title="1，background-position 的扩展语法方案"></a>1，<a href="https://www.w3.org/TR/css3-background/#background-position" target="_blank" rel="external">background-position</a> 的扩展语法方案</h4><p>在 css3-background 中，background-position 属性允许我们指定背景图片距离任意角的偏移量，只要我们在偏移量前面指定关键字。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">url</span>(<span class="selector-tag">code-pirate</span><span class="selector-class">.svg</span>) <span class="selector-tag">no-repeat</span> <span class="selector-tag">bottom</span> <span class="selector-tag">right</span> <span class="selector-id">#58a</span>;</span><br><span class="line"><span class="selector-tag">background-position</span>: <span class="selector-tag">right</span> 20<span class="selector-tag">px</span> <span class="selector-tag">bottom</span> 10<span class="selector-tag">px</span>;</span><br></pre></td></tr></table></figure><h4 id="2，background-origin-方案（实现偏移量与容器-padding-一致）"><a href="#2，background-origin-方案（实现偏移量与容器-padding-一致）" class="headerlink" title="2，background-origin 方案（实现偏移量与容器 padding 一致）"></a>2，<a href="https://www.w3.org/TR/css3-background/#the-background-origin" target="_blank" rel="external">background-origin</a> 方案（实现偏移量与容器 padding 一致）</h4><p>每个元素都存在三个矩形框：border-box，padding-box，content-box，默认情况下，background-position 是以 padding-box 为准（这样边框才不会遮住背景图片）。</p><p>在 css3-background 中，有一个新属性 background-origin，默认值为 padding-box。<br>如果把它的值改成 content-box，我们在 background-position 属性中使用的边角关键字将会以内容区的边缘作为基准。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">padding</span>: 10<span class="selector-tag">px</span>;</span><br><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">url</span>("<span class="selector-tag">code-pirate</span><span class="selector-class">.svg</span>") <span class="selector-tag">no-repeat</span> <span class="selector-id">#58a</span> <span class="selector-tag">bottom</span> <span class="selector-tag">right</span>; <span class="comment">/* 或 100% 100% */</span></span><br><span class="line"><span class="selector-tag">background-origin</span>: <span class="selector-tag">content-box</span>;</span><br></pre></td></tr></table></figure><h4 id="3，calc-方案"><a href="#3，calc-方案" class="headerlink" title="3，calc() 方案"></a>3，<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/calc" target="_blank" rel="external">calc()</a> 方案</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">url</span>("<span class="selector-tag">code-pirate</span><span class="selector-class">.svg</span>") <span class="selector-tag">no-repeat</span>;</span><br><span class="line"><span class="selector-tag">background-position</span>: <span class="selector-tag">calc</span>(100% <span class="selector-tag">-</span> 20<span class="selector-tag">px</span>) <span class="selector-tag">calc</span>(100% <span class="selector-tag">-</span> 10<span class="selector-tag">px</span>);</span><br></pre></td></tr></table></figure><h5 id="注意：-1"><a href="#注意：-1" class="headerlink" title="注意："></a>注意：</h5><p>calc() 函数需要在运算符的两侧各加一个空格，否则会产生解析错误。</p><h3 id="四，边框内圆角"><a href="#四，边框内圆角" class="headerlink" title="四，边框内圆角"></a>四，边框内圆角</h3><h4 id="1，常规做法（用两个元素实现"><a href="#1，常规做法（用两个元素实现" class="headerlink" title="1，常规做法（用两个元素实现)"></a>1，常规做法（<a href="http://codepen.io/xuzhijun/pen/yMeQbw" target="_blank" rel="external">用两个元素实现</a>)</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"something-meaningful"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    I have a nice subtle inner rounding, don't I look pertty?</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.something-meaningful</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#655</span>;</span><br><span class="line">  <span class="attribute">padding</span>: .<span class="number">8em</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.something-meaningful</span> &gt; <span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: tan;</span><br><span class="line">  <span class="attribute">border-radius</span>: .<span class="number">8em</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">1em</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2，解决方案（用一个元素实现）"><a href="#2，解决方案（用一个元素实现）" class="headerlink" title="2，解决方案（用一个元素实现）"></a>2，解决方案（<a href="http://codepen.io/xuzhijun/pen/MpKzzg" target="_blank" rel="external">用一个元素实现</a>）</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"something-meaningful"</span>&gt;</span></span><br><span class="line">    I have a nice subtle inner rounding, don't I look pertty?</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.something-meaningful</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: tan;</span><br><span class="line">  <span class="attribute">border-radius</span>: .<span class="number">8em</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">1em</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> .<span class="number">4em</span> <span class="number">#655</span>;</span><br><span class="line">  <span class="attribute">outline</span>: .<span class="number">6em</span> solid <span class="number">#655</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h5><p>是利用了 outline 不会跟着圆角走，而 box-shadow 会刚好填补 outline 和容器圆角之间的空隙。</p><h5 id="注意：-2"><a href="#注意：-2" class="headerlink" title="注意："></a>注意：</h5><p>这个方法有一个限制，box-shadow 的扩张半径需要比 outline 的宽度值小，且大于等于圆角半径的一半。</p><h3 id="五，条纹背景"><a href="#五，条纹背景" class="headerlink" title="五，条纹背景"></a>五，条纹背景</h3><h4 id="解决方案（使用-linear-gradient-函数-和-background-size-组合实现）"><a href="#解决方案（使用-linear-gradient-函数-和-background-size-组合实现）" class="headerlink" title="解决方案（使用 linear-gradient() 函数 和 background-size 组合实现）"></a>解决方案（使用 <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/linear-gradient" target="_blank" rel="external">linear-gradient()</a> 函数 和 <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/background-size" target="_blank" rel="external">background-size</a> 组合实现）</h4><h4 id="1，水平条纹"><a href="#1，水平条纹" class="headerlink" title="1，水平条纹"></a>1，水平条纹</h4><blockquote><p>如果多个色标具有相同的位置，他们会产生一个无线小的过渡区域，过渡的起止色分别是第一个和最后一个指定值。从效果上看，颜色会在那个位置突然变化，而不是一个平滑的渐变过程。</p><p>——CSS 图像（第三版）</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 等宽条纹 */</span></span><br><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">linear-gradient</span>(<span class="selector-id">#fb3</span> 50%, <span class="selector-id">#58a</span> 50%);</span><br><span class="line"><span class="selector-tag">background-size</span>: 100% 30<span class="selector-tag">px</span>;</span><br><span class="line"><span class="comment">/* 不等宽条纹 */</span></span><br><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">linear-gradient</span>(<span class="selector-id">#fb3</span> 30%, <span class="selector-id">#58a</span> 30%);</span><br><span class="line"><span class="selector-tag">background-size</span>: 100% 30<span class="selector-tag">px</span>;</span><br></pre></td></tr></table></figure><blockquote><p>如果某个色标的位置值比整个列表中在它之前的色标的位置值都要小，则该色标的位置值会被设置为它前面所有色标位置值的最大值。</p><p>——CSS 图像（第三版）</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 双色条纹 */</span></span><br><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">linear-gradient</span>(<span class="selector-id">#fb3</span> 30%, <span class="selector-id">#58a</span> 0);</span><br><span class="line"><span class="selector-tag">background-size</span>: 100% 30<span class="selector-tag">px</span>;</span><br><span class="line"><span class="comment">/* 三色条纹 */</span></span><br><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">linear-gradient</span>(<span class="selector-id">#fb3</span> 33<span class="selector-class">.3</span>%, <span class="selector-id">#58a</span> 0, <span class="selector-id">#58a</span> 66<span class="selector-class">.6</span>%, <span class="selector-tag">yellowgreen</span> 0);</span><br><span class="line"><span class="selector-tag">background-size</span>: 100% 30<span class="selector-tag">px</span>;</span><br></pre></td></tr></table></figure><h4 id="2，垂直条纹"><a href="#2，垂直条纹" class="headerlink" title="2，垂直条纹"></a>2，垂直条纹</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">to</span> <span class="selector-tag">right</span> <span class="comment">/*或 90deg */</span>, <span class="selector-id">#fb3</span> 50%, <span class="selector-id">#58a</span> 0;</span><br><span class="line"><span class="selector-tag">background-size</span>: 30<span class="selector-tag">px</span> 100%;</span><br></pre></td></tr></table></figure><h4 id="3，斜向条纹"><a href="#3，斜向条纹" class="headerlink" title="3，斜向条纹"></a>3，斜向条纹</h4><p>并不是简单的旋转渐变角度就能得到斜向条纹。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 失败的斜向条纹 */</span></span><br><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">linear-gradient</span>(45<span class="selector-tag">deg</span>, <span class="selector-id">#fb3</span> 50%, <span class="selector-id">#58a</span> 0);</span><br><span class="line"><span class="selector-tag">background-size</span>: 30<span class="selector-tag">px</span> 30<span class="selector-tag">px</span>;</span><br><span class="line"><span class="comment">/* 比预期略细的斜向条纹 */</span></span><br><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">linear-gradient</span>(45<span class="selector-tag">deg</span>, <span class="selector-id">#fb3</span> 25%, <span class="selector-id">#58a</span> 0, <span class="selector-id">#58a</span> 50%, <span class="selector-id">#fb3</span> 0, <span class="selector-id">#fb3</span> 75%, <span class="selector-id">#58a</span> 0);</span><br><span class="line"><span class="selector-tag">background-size</span>: 30<span class="selector-tag">px</span> 30<span class="selector-tag">px</span>;</span><br><span class="line"><span class="comment">/* 勾股定理下预期的斜向条纹 */</span></span><br><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">linear-gradient</span>(45<span class="selector-tag">deg</span>, <span class="selector-id">#fb3</span> 25%, <span class="selector-id">#58a</span> 0, <span class="selector-id">#58a</span> 50%, <span class="selector-id">#fb3</span> 0, <span class="selector-id">#fb3</span> 75%, <span class="selector-id">#58a</span> 0);</span><br><span class="line"><span class="selector-tag">background-size</span>: 42<span class="selector-class">.426406871px</span> 42<span class="selector-class">.426406871px</span>;</span><br></pre></td></tr></table></figure><h4 id="4，更好的斜向条纹"><a href="#4，更好的斜向条纹" class="headerlink" title="4，更好的斜向条纹"></a>4，更好的斜向条纹</h4><p>linear-gradient() 和 radial-gradient() 各有一个循环式的加强版：</p><p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/repeating-linear-gradient" target="_blank" rel="external">repeating-linear-gradient()</a> 和 <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/repeating-radial-gradient" target="_blank" rel="external">repeating-radial-gradient()</a>。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 重复线性渐变：直接在渐变的色标中指定长度 */</span></span><br><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">repeating-linear-gradient</span>(45<span class="selector-tag">deg</span>, <span class="selector-id">#fb3</span>, <span class="selector-id">#fb3</span> 15<span class="selector-tag">px</span>, <span class="selector-id">#58a</span> 0, <span class="selector-id">#58a</span> 30<span class="selector-tag">px</span>);</span><br><span class="line"><span class="comment">/* 可指定任意角度的斜向条纹 */</span></span><br><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">repeating-linear-gradient</span>(60<span class="selector-tag">deg</span>, <span class="selector-id">#fb3</span>, <span class="selector-id">#fb3</span> 15<span class="selector-tag">px</span>, <span class="selector-id">#58a</span> 0, <span class="selector-id">#58a</span> 30<span class="selector-tag">px</span>);</span><br></pre></td></tr></table></figure><h5 id="建议："><a href="#建议：" class="headerlink" title="建议："></a>建议：</h5><p>用 linear-gradient() 来实现水平或垂直的条纹，用 repeating-linear-gradient() 来实现斜向条纹。</p><h4 id="5，灵活的同色系条纹"><a href="#5，灵活的同色系条纹" class="headerlink" title="5，灵活的同色系条纹"></a>5，灵活的同色系条纹</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 常规的做法 */</span></span><br><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">repeating-linear-gradient</span>(30<span class="selector-tag">deg</span>, <span class="selector-id">#79b</span>, <span class="selector-id">#79b</span> 15<span class="selector-tag">px</span>, <span class="selector-id">#58a</span> 0, <span class="selector-id">#58a</span> 30<span class="selector-tag">px</span>);</span><br></pre></td></tr></table></figure><p><strong>更好的做法：</strong>不为每种条纹单独指定颜色，而是把最深的颜色指定为背景色，同时把半透明白色的条纹叠加在背景色之上得到浅色条纹。</p><p><strong>补充：</strong>只有设计上使用了这种做法，才能保证前端做出来的于设计稿一致。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background</span>: <span class="selector-id">#58a</span>;</span><br><span class="line"><span class="selector-tag">backbround-image</span>: <span class="selector-tag">repeating-linear-gradient</span>(30<span class="selector-tag">deg</span>, </span><br><span class="line"><span class="selector-tag">hsla</span>(0, 0%, 100%, <span class="selector-class">.1</span>),</span><br><span class="line"><span class="selector-tag">hsla</span>(0, 0%, 100%, <span class="selector-class">.1</span>) 15<span class="selector-tag">px</span>,</span><br><span class="line"><span class="selector-tag">transparent</span> 0, <span class="selector-tag">transparent</span> 30<span class="selector-tag">px</span>);</span><br></pre></td></tr></table></figure><h3 id="六，复杂的背景图案"><a href="#六，复杂的背景图案" class="headerlink" title="六，复杂的背景图案"></a>六，复杂的背景图案</h3><p>把多个渐变图案组合起来，可以创建复杂的背景图案。</p><h4 id="网格"><a href="#网格" class="headerlink" title="网格"></a>网格</h4><p>把用 linear-gradient() 做成的水平和垂直条纹叠加起来，从而得到各种样式的网格。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 方格纹 */</span></span><br><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">white</span>;</span><br><span class="line"><span class="selector-tag">background-image</span>:</span><br><span class="line"><span class="selector-tag">linear-gradient</span>(<span class="selector-tag">rgba</span>(200, 0, 0, <span class="selector-class">.5</span>) 50%, <span class="selector-tag">transparent</span> 0),</span><br><span class="line"><span class="selector-tag">linear-gradient</span>(90<span class="selector-tag">deg</span>, <span class="selector-tag">rgba</span>(200, 0, 0, <span class="selector-class">.5</span>) 50%, <span class="selector-tag">transparent</span> 0);</span><br><span class="line"><span class="selector-tag">background-size</span>: 30<span class="selector-tag">px</span> 30<span class="selector-tag">px</span>;</span><br><span class="line"><span class="comment">/* 格子大小可调整，网格线粗细固定的蓝色网格 */</span></span><br><span class="line"><span class="selector-tag">background</span>: <span class="selector-id">#58a</span>;</span><br><span class="line"><span class="selector-tag">background-image</span>:</span><br><span class="line"><span class="selector-tag">linear-gradient</span>(<span class="selector-tag">white</span> 1<span class="selector-tag">px</span>, <span class="selector-tag">transparent</span> 0),</span><br><span class="line"><span class="selector-tag">linear-gradient</span>(90<span class="selector-tag">deg</span>, <span class="selector-tag">white</span> 1<span class="selector-tag">px</span>, <span class="selector-tag">transparent</span> 0);</span><br><span class="line"><span class="selector-tag">background-size</span>: 30<span class="selector-tag">px</span> 30<span class="selector-tag">px</span>;</span><br><span class="line"><span class="comment">/* 更加逼真的蓝色网格 */</span></span><br><span class="line"><span class="selector-tag">background</span>: <span class="selector-id">#58a</span>;</span><br><span class="line"><span class="selector-tag">background-image</span>:</span><br><span class="line"><span class="selector-tag">linear-gradient</span>(<span class="selector-tag">white</span> 2<span class="selector-tag">px</span>, <span class="selector-tag">transparent</span> 0),</span><br><span class="line"><span class="selector-tag">linear-gradient</span>(90<span class="selector-tag">deg</span>, <span class="selector-tag">white</span> 2<span class="selector-tag">px</span>, <span class="selector-tag">transparent</span> 0),</span><br><span class="line"><span class="selector-tag">linear-gradient</span>(<span class="selector-tag">hsla</span>(0, 0%, 100%, <span class="selector-class">.3</span>) 1<span class="selector-tag">px</span>, <span class="selector-tag">transparent</span> 0),</span><br><span class="line"><span class="selector-tag">linear-gradient</span>(90<span class="selector-tag">deg</span>, <span class="selector-tag">hsla</span>(0, 0%, 100%, <span class="selector-class">.3</span>) 1<span class="selector-tag">px</span>, <span class="selector-tag">transparent</span> 0);</span><br><span class="line"><span class="selector-tag">background-size</span>: 75<span class="selector-tag">px</span> 75<span class="selector-tag">px</span>, 75<span class="selector-tag">px</span> 75<span class="selector-tag">px</span>, 15<span class="selector-tag">px</span> 15<span class="selector-tag">px</span>, 15<span class="selector-tag">px</span> 15<span class="selector-tag">px</span>;</span><br></pre></td></tr></table></figure><h4 id="波点"><a href="#波点" class="headerlink" title="波点"></a>波点</h4><p>使用 <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/radial-gradient" target="_blank" rel="external">radial-gradient()</a> 可以创建圆形、椭圆，或是它们的一部分。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 圆形阵列 */</span></span><br><span class="line"><span class="selector-tag">background</span>: <span class="selector-id">#655</span>;</span><br><span class="line"><span class="selector-tag">background-image</span>: <span class="selector-tag">radial-gradient</span>(<span class="selector-tag">tan</span> 30%, <span class="selector-tag">transparent</span> 0);</span><br><span class="line"><span class="selector-tag">background-size</span>: 30<span class="selector-tag">px</span> 30<span class="selector-tag">px</span>;</span><br><span class="line"><span class="comment">/* 波点 */</span></span><br><span class="line"><span class="selector-tag">background</span>: <span class="selector-id">#655</span>;</span><br><span class="line"><span class="selector-tag">background-image</span>: </span><br><span class="line"><span class="selector-tag">radial-gradient</span>(<span class="selector-tag">tan</span> 30%, <span class="selector-tag">transparent</span> 0),</span><br><span class="line"><span class="selector-tag">radial-gradient</span>(<span class="selector-tag">tan</span> 30%, <span class="selector-tag">transparent</span> 0);</span><br><span class="line"><span class="selector-tag">background-size</span>: 30<span class="selector-tag">px</span> 30<span class="selector-tag">px</span>;</span><br><span class="line"><span class="selector-tag">background-position</span>: 0 0, 15<span class="selector-tag">px</span> 15<span class="selector-tag">px</span>;</span><br></pre></td></tr></table></figure><p>使用预处理器的mixin来简化代码</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">mixin</span> polka(<span class="variable">$size</span>, <span class="variable">$dot</span>, <span class="variable">$base</span>, <span class="variable">$accent</span>) &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="variable">$base</span>;</span><br><span class="line">  <span class="attribute">background-image</span>:</span><br><span class="line">    radial-gradient(<span class="variable">$accent</span> <span class="variable">$dot</span>, transparent <span class="number">0</span>),</span><br><span class="line">    radial-gradient(<span class="variable">$accent</span> <span class="variable">$dot</span>, transparent <span class="number">0</span>);</span><br><span class="line">  <span class="attribute">background-size</span>: <span class="variable">$size</span> <span class="variable">$size</span>;</span><br><span class="line">  <span class="attribute">background-position</span>: <span class="number">0</span> <span class="number">0</span>, <span class="variable">$size</span>/<span class="number">2</span> <span class="variable">$size</span>/<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  @<span class="keyword">include</span> polka(<span class="number">30px</span>, 30%, <span class="number">#655</span>, tan);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="棋盘"><a href="#棋盘" class="headerlink" title="棋盘"></a>棋盘</h4><p>使用两层 CSS 渐变创建四周有空隙的方块。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 白底蓝块 */</span></span><br><span class="line"><span class="selector-tag">background</span>: <span class="selector-id">#58a</span>;</span><br><span class="line"><span class="selector-tag">background-image</span>:</span><br><span class="line"><span class="selector-tag">linear-gradient</span>(90<span class="selector-tag">deg</span>, <span class="selector-tag">white</span> 50%, <span class="selector-tag">transparent</span> 0),</span><br><span class="line"><span class="selector-tag">linear-gradient</span>(<span class="selector-tag">white</span> 50%, <span class="selector-tag">transparent</span> 0);</span><br><span class="line"><span class="selector-tag">background-size</span>: 30<span class="selector-tag">px</span> 30<span class="selector-tag">px</span>;</span><br></pre></td></tr></table></figure><p>使用两个直角三角形组合成方块。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 半张棋盘 */</span></span><br><span class="line"><span class="selector-tag">background</span>: <span class="selector-id">#eee</span>;</span><br><span class="line"><span class="selector-tag">background-image</span>: </span><br><span class="line">  <span class="selector-tag">linear-gradient</span>(45<span class="selector-tag">deg</span>, <span class="selector-id">#bbb</span> 25%, <span class="selector-tag">transparent</span> 0),</span><br><span class="line">  <span class="selector-tag">linear-gradient</span>(45<span class="selector-tag">deg</span>, <span class="selector-tag">transparent</span> 75%, <span class="selector-id">#bbb</span> 0);</span><br><span class="line"><span class="selector-tag">background-position</span>: 0 0, 15<span class="selector-tag">px</span> 15<span class="selector-tag">px</span>;</span><br><span class="line"><span class="selector-tag">background-size</span>: 30<span class="selector-tag">px</span> 30<span class="selector-tag">px</span>;</span><br><span class="line"><span class="comment">/* 完整棋盘 */</span></span><br><span class="line"><span class="selector-tag">background</span>: <span class="selector-id">#eee</span>;</span><br><span class="line"><span class="selector-tag">background-image</span>: </span><br><span class="line">  <span class="selector-tag">linear-gradient</span>(45<span class="selector-tag">deg</span>, <span class="selector-id">#bbb</span> 25%, <span class="selector-tag">transparent</span> 0),</span><br><span class="line">  <span class="selector-tag">linear-gradient</span>(45<span class="selector-tag">deg</span>, <span class="selector-tag">transparent</span> 75%, <span class="selector-id">#bbb</span> 0),</span><br><span class="line">  <span class="selector-tag">linear-gradient</span>(45<span class="selector-tag">deg</span>, <span class="selector-id">#bbb</span> 25%, <span class="selector-tag">transparent</span> 0),</span><br><span class="line">  <span class="selector-tag">linear-gradient</span>(45<span class="selector-tag">deg</span>, <span class="selector-tag">transparent</span> 75%, <span class="selector-id">#bbb</span> 0);</span><br><span class="line"><span class="selector-tag">background-position</span>: 0 0, 15<span class="selector-tag">px</span> 15<span class="selector-tag">px</span>,15<span class="selector-tag">px</span> 15<span class="selector-tag">px</span>, 30<span class="selector-tag">px</span> 30<span class="selector-tag">px</span>;</span><br><span class="line"><span class="selector-tag">background-size</span>: 30<span class="selector-tag">px</span> 30<span class="selector-tag">px</span>;</span><br><span class="line"><span class="comment">/* 优化版棋盘 */</span></span><br><span class="line"><span class="selector-tag">background</span>: <span class="selector-id">#eee</span>;</span><br><span class="line"><span class="selector-tag">background-image</span>: </span><br><span class="line"><span class="selector-tag">linear-gradient</span>(45<span class="selector-tag">deg</span>, <span class="selector-tag">rgba</span>(0, 0, 0, <span class="selector-class">.25</span>) 25%, <span class="selector-tag">transparent</span> 0,</span><br><span class="line"><span class="selector-tag">transparent</span> 75%, <span class="selector-tag">rgba</span>(0, 0, 0, <span class="selector-class">.25</span>) 0),</span><br><span class="line"><span class="selector-tag">linear-gradient</span>(45<span class="selector-tag">deg</span>, <span class="selector-tag">rgba</span>(0, 0, 0, <span class="selector-class">.25</span>) 25%, <span class="selector-tag">transparent</span> 0,</span><br><span class="line"><span class="selector-tag">transparent</span> 75%, <span class="selector-tag">rgba</span>(0, 0, 0, <span class="selector-class">.25</span>) 0);</span><br><span class="line"><span class="selector-tag">background-position</span>: 0 0, 15<span class="selector-tag">px</span> 15<span class="selector-tag">px</span>;</span><br><span class="line"><span class="selector-tag">background-size</span>: 30<span class="selector-tag">px</span> 30<span class="selector-tag">px</span>;</span><br></pre></td></tr></table></figure><p>使用预处理器的mixin来简化代码</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">mixin</span> checkerboard(<span class="variable">$size</span>, <span class="variable">$base</span>, <span class="variable">$accent</span>: rgba(<span class="number">0</span>, 0, 0, .25)) &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="variable">$base</span>;</span><br><span class="line">  <span class="attribute">background-image</span>:</span><br><span class="line">    linear-gradient(<span class="number">45deg</span>, <span class="variable">$accent</span> <span class="number">25%</span>, transparent <span class="number">0</span>,</span><br><span class="line">    transparent <span class="number">75%</span>, <span class="variable">$accent</span> <span class="number">0</span>),</span><br><span class="line">    linear-gradient(<span class="number">45deg</span>, <span class="variable">$accent</span> <span class="number">25%</span>, transparent <span class="number">0</span>,</span><br><span class="line">    transparent <span class="number">75%</span>, <span class="variable">$accent</span> <span class="number">0</span>);</span><br><span class="line">  <span class="attribute">background-position</span>: <span class="number">0</span> <span class="number">0</span>, <span class="variable">$size</span> <span class="variable">$size</span>;</span><br><span class="line">  <span class="attribute">background-size</span>: <span class="number">2</span>*<span class="variable">$size</span> <span class="number">2</span>*<span class="variable">$size</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  @<span class="keyword">include</span> checkerboard(<span class="number">15px</span>, <span class="number">#58a</span>, tan);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SVG实现方案：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/2000/svg"</span> <span class="attr">width</span>=<span class="string">"100"</span> <span class="attr">height</span>=<span class="string">"100"</span> <span class="attr">fill-opacity</span>=<span class="string">".25"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">rect</span> <span class="attr">x</span>=<span class="string">"50"</span> <span class="attr">width</span>=<span class="string">"50"</span> <span class="attr">height</span>=<span class="string">"50"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">rect</span> <span class="attr">y</span>=<span class="string">"50"</span> <span class="attr">width</span>=<span class="string">"50"</span> <span class="attr">height</span>=<span class="string">"50"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure><p>把上面的 SVG 文件以 data URI 的方式内嵌到样式表中（不需要用base64 或 URLencode 来对其编码）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">background: #eee url('data:image/svg+xml,\</span><br><span class="line">&lt;svg xmlns="http://www.w3.org/2000/svg" width="100" height="100" fill-opacity=".25"&gt;\</span><br><span class="line">  &lt;rect x="50" width="50" height="50" /&gt;\</span><br><span class="line">  &lt;rect y="50" width="50" height="50" /&gt;\</span><br><span class="line">&lt;/svg&gt;');</span><br><span class="line"><span class="selector-tag">background-size</span>: 30<span class="selector-tag">px</span> 30<span class="selector-tag">px</span>;</span><br></pre></td></tr></table></figure><h5 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h5><p>出于可读性考虑，如果需要把一句 CSS 代码打断为多行，只需要用反斜杠(\)来转义每行末尾的换行就可以了。</p><p>参考：</p><p>1，作者的<a href="http://lea.verou.me/css3patterns/" target="_blank" rel="external">CSS图案库</a>，<a href="https://philiprogers.com/svgpatterns/" target="_blank" rel="external">CSS图案库的SVG版</a>。</p><p>2，Bennett Feely 的<a href="http://bennettfeely.com/gradients/" target="_blank" rel="external">图案库</a>。</p><h3 id="七，伪随机背景"><a href="#七，伪随机背景" class="headerlink" title="七，伪随机背景"></a>七，伪随机背景</h3><h3 id="八，连续的图像边框"><a href="#八，连续的图像边框" class="headerlink" title="八，连续的图像边框"></a>八，连续的图像边框</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一，半透明边框和背景色的问题&quot;&gt;&lt;a href=&quot;#一，半透明边框和背景色的问题&quot; class=&quot;headerlink&quot; title=&quot;一，半透明边框和背景色的问题&quot;&gt;&lt;/a&gt;一，半透明边框和背景色的问题&lt;/h3&gt;&lt;h4 id=&quot;1，background-clip
      
    
    </summary>
    
      <category term="CSS" scheme="http://xuzhijun.github.io/categories/CSS/"/>
    
    
      <category term="CSS" scheme="http://xuzhijun.github.io/tags/CSS/"/>
    
      <category term="CSS3" scheme="http://xuzhijun.github.io/tags/CSS3/"/>
    
  </entry>
  
  <entry>
    <title>CSS 揭秘 - 关于本书</title>
    <link href="http://xuzhijun.github.io/2016/11/17/css-secrets-chap0/"/>
    <id>http://xuzhijun.github.io/2016/11/17/css-secrets-chap0/</id>
    <published>2016-11-17T07:00:00.000Z</published>
    <updated>2016-11-24T02:46:28.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="几个函数："><a href="#几个函数：" class="headerlink" title="几个函数："></a>几个函数：</h3><h4 id="一，选择器函数"><a href="#一，选择器函数" class="headerlink" title="一，选择器函数"></a>一，选择器函数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 选择器函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">$$</span>(<span class="params">selector, context</span>) </span>&#123;</span><br><span class="line">  context = context || <span class="built_in">document</span>;</span><br><span class="line">  <span class="keyword">var</span> elements = context.querySelectorAll(selector);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Array</span>.prototype.slice.call(elements);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="注解："><a href="#注解：" class="headerlink" title="注解："></a>注解：</h4><p>1）使用 <strong><em>ES5</em></strong> 的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document/querySelectorAll" target="_blank" rel="external">querySelectorAll</a> 方法，返回一个 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/NodeList" target="_blank" rel="external">NodeList</a> 对象。</p><p>2）<strong><em>NodeList</em></strong> 对象不是数组，需要使用 <strong><em>Array.prototype.slice.call(NodeList)</em></strong> 方法进行转换。</p><h4 id="二，检测当前浏览器是否支持CSS属性"><a href="#二，检测当前浏览器是否支持CSS属性" class="headerlink" title="二，检测当前浏览器是否支持CSS属性"></a>二，检测当前浏览器是否支持CSS属性</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 检测多个属性</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 单一功能</span></span><br><span class="line"><span class="keyword">var</span> root = <span class="built_in">document</span>.documentElement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="string">'textShadow'</span> <span class="keyword">in</span> root.style) &#123;</span><br><span class="line">  root.classList.add(<span class="string">'textShadow'</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  root.classList.add(<span class="string">'no-textShadow'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通用函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testProperty</span>(<span class="params">property</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> root = <span class="built_in">document</span>.documentElement;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span>(property <span class="keyword">in</span> root.style) &#123;</span><br><span class="line">    root.classList.add(property.toLowerCase());</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  root.classList.add(<span class="string">'no-'</span> + property.toLowerCase());</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="注解：-1"><a href="#注解：-1" class="headerlink" title="注解："></a>注解：</h4><p>1）通过 document 的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document/documentElement" target="_blank" rel="external">documentElement</a> 只读属性，获得文档的 root 元素。</p><p>2）通过 HTMLElement 的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLElement/style" target="_blank" rel="external">style</a> 属性，获得 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/CSSStyleDeclaration" target="_blank" rel="external">CSSStyleDeclaration</a> 对象，使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/in" target="_blank" rel="external">in</a> 运算符查询对象中是否包含该属性。</p><p>3）通过 Element 的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Element/classList" target="_blank" rel="external">classList</a> 属性，获得一个实时 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/DOMTokenList" target="_blank" rel="external">DOMTokenList</a> 集合，使用 add 方法添加 class 属性。</p><h4 id="三，检测当前浏览器支持的CSS属性是否支持某属性值"><a href="#三，检测当前浏览器支持的CSS属性是否支持某属性值" class="headerlink" title="三，检测当前浏览器支持的CSS属性是否支持某属性值"></a>三，检测当前浏览器支持的CSS属性是否支持某属性值</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 检测属性值是否支持</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 单一功能</span></span><br><span class="line"><span class="keyword">var</span> dummy = <span class="built_in">document</span>.createElement(<span class="string">'p'</span>);</span><br><span class="line">dummy.style.backgroundImage = <span class="string">'linear-gradient(red, tan)'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(dummy.style.backgroundImage) &#123;</span><br><span class="line">  root.classList.add(<span class="string">'lineargradients'</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  root.classList.add(<span class="string">'no-lineargradients'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 通用函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testValue</span>(<span class="params">id, value, property</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> dummy = <span class="built_in">document</span>.createElement(<span class="string">'p'</span>);</span><br><span class="line">  dummy.style[property] = value;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span>(dummy.style[property]) &#123;</span><br><span class="line">    root.classList.add(id);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  root.classList.add(<span class="string">'no-'</span> + id);</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;几个函数：&quot;&gt;&lt;a href=&quot;#几个函数：&quot; class=&quot;headerlink&quot; title=&quot;几个函数：&quot;&gt;&lt;/a&gt;几个函数：&lt;/h3&gt;&lt;h4 id=&quot;一，选择器函数&quot;&gt;&lt;a href=&quot;#一，选择器函数&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
      <category term="CSS" scheme="http://xuzhijun.github.io/categories/CSS/"/>
    
    
      <category term="CSS" scheme="http://xuzhijun.github.io/tags/CSS/"/>
    
      <category term="CSS3" scheme="http://xuzhijun.github.io/tags/CSS3/"/>
    
  </entry>
  
  <entry>
    <title>奶爸笔记（二十七）</title>
    <link href="http://xuzhijun.github.io/2016/10/20/life-anewfather27/"/>
    <id>http://xuzhijun.github.io/2016/10/20/life-anewfather27/</id>
    <published>2016-10-20T13:00:00.000Z</published>
    <updated>2016-10-21T08:20:56.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>拜托了妈妈 2016-10-07 期，2016-10-11 期，2016-10-18 期</p></blockquote><h3 id="一，添加辅食"><a href="#一，添加辅食" class="headerlink" title="一，添加辅食"></a>一，添加辅食</h3><p>1，胡萝卜素需要和油一起加热才易吸收，小宝宝需要打成泥。</p><p>2，宝宝吃的绿叶菜一定不要煮的过烂，给小宝宝吃要焯一下剁烂了，大宝宝吃就可以剁碎了。</p><p>3，给宝宝不能吃单一的一种油，要换着吃。</p><p>4，满七个月就可以吃肉（肉泥）。</p><p>5，太易嚼的食物不利于宝宝口腔发育。</p><p>6，建议一岁以内把所有食物混在一起吃，一岁以上建议分开吃，锻炼孩子的分辨能力。</p><h3 id="二，育儿"><a href="#二，育儿" class="headerlink" title="二，育儿"></a>二，育儿</h3><p>1，育儿四大能力：待人，待物，语言，运动。</p><p>2，穷养儿，有创造性，勇于担当。富养女，主动给予多一些，不超过自家的经历状况。</p><p>3，帮助宝宝趴着：一手扶肩关节，一手扶髋关节，将宝宝双手向前并轻轻按摩宝宝脊背。</p><p>4，帮助宝宝平躺：一手扶肩关节，一手扶颈部，一提一托，翻回来平躺。</p><h3 id="三，新手爸妈培训手册"><a href="#三，新手爸妈培训手册" class="headerlink" title="三，新手爸妈培训手册"></a>三，新手爸妈培训手册</h3><p>1，缓解宝宝肠绞痛的五种方法：</p><p>​    1）将宝宝包裹紧</p><p>​    2）尽量侧卧或者趴着</p><p>​    3）头部略低适当摇晃</p><p>​    4）在耳边发 “shi” 声</p><p>​    5）给宝宝喂奶吸吮</p><p>2，宝宝洗澡时耳朵进水，用棉球置于耳朵口。</p><h3 id="四，增强婴幼儿的抵抗力"><a href="#四，增强婴幼儿的抵抗力" class="headerlink" title="四，增强婴幼儿的抵抗力"></a>四，增强婴幼儿的抵抗力</h3><p>1，三浴训练：</p><p>​    1）日光浴（新生儿起，晒后背，晒屁股）。</p><p>​    2）空气浴（在室外温度不低于25度），多做户外活动。</p><p>​    3）冷水浴（用冷水擦脸，四肢），用不低于25度的冷水淋浴，30秒到1分钟。</p><p>2，儿童膳食算盘</p><p>​    1）谷薯类5～6份（粮食，山药，南瓜，土豆等）</p><p>​    2）蔬果类4～5份（深色蔬菜可为宝宝提供体内多种营养，叶黄素可以保护宝宝眼睛）</p><p>​    3）水果类3～4份（提供矿物盐河膳食纤维）</p><p>​    4）畜禽肉淡水产品类2～3份（红肉补铁，海产品含有不饱和脂肪酸）</p><p>​    5）大豆坚果奶类2～3份（矿物质，不饱和脂肪酸）</p><p>​    6）油盐类适量</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;拜托了妈妈 2016-10-07 期，2016-10-11 期，2016-10-18 期&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;一，添加辅食&quot;&gt;&lt;a href=&quot;#一，添加辅食&quot; class=&quot;headerlink&quot; title=&quot;一
      
    
    </summary>
    
      <category term="生活" scheme="http://xuzhijun.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="生活" scheme="http://xuzhijun.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="奶爸" scheme="http://xuzhijun.github.io/tags/%E5%A5%B6%E7%88%B8/"/>
    
      <category term="辅食" scheme="http://xuzhijun.github.io/tags/%E8%BE%85%E9%A3%9F/"/>
    
      <category term="肠绞痛" scheme="http://xuzhijun.github.io/tags/%E8%82%A0%E7%BB%9E%E7%97%9B/"/>
    
      <category term="疫苗" scheme="http://xuzhijun.github.io/tags/%E7%96%AB%E8%8B%97/"/>
    
  </entry>
  
  <entry>
    <title>奶爸笔记（二十六）</title>
    <link href="http://xuzhijun.github.io/2016/10/20/life-anewfather26/"/>
    <id>http://xuzhijun.github.io/2016/10/20/life-anewfather26/</id>
    <published>2016-10-20T05:00:00.000Z</published>
    <updated>2016-10-20T13:38:57.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>拜托了妈妈 2016-09-20 期，2016-09-27 期</p></blockquote><h3 id="一，给宝宝挑鞋"><a href="#一，给宝宝挑鞋" class="headerlink" title="一，给宝宝挑鞋"></a>一，给宝宝挑鞋</h3><p>1，宝宝穿了不合适的鞋子和鞋垫，造成足弓消失或僵硬，对于保护孩子的大脑脊髓都起着相反或者坏的作用。</p><p>2，儿童常见足部毛病：扁平足，足外翻，X型腿，高弓足，O型腿。</p><p>3，量脚长应该站着量。</p><p>4，宝宝什么时候都能穿鞋。</p><p>5，建议赤脚学走路，赤足可以促进宝宝脑神经发育。</p><p>6，买鞋注意鞋子本身的甲醛和甲苯的污染。</p><p>7，宝宝鞋子的三个阶段：</p><p>​    1）小于 6 个月宝宝穿的步前鞋（不用与走路，很随脚柔软，鞋底和鞋面光滑，可对折）</p><p>​    2）宝宝能站立时穿的学步鞋（最好是光脚学步，能调节鞋面，鞋垫前掌要薄，鞋底不能太防滑，1/3处弯折）</p><p>​    3）宝宝会走路时穿的稳步鞋（鞋头要圆要硬，鞋面透气柔软，1/3处弯折，后帮要硬保护踝关节，鞋垫前面要薄，后面要有减震，带3～5毫米鞋跟）</p><p>8，皮鞋的结构最完整，有益于端正宝宝的体态，从第一双鞋起就建议穿皮鞋。</p><h3 id="二，宝宝出游"><a href="#二，宝宝出游" class="headerlink" title="二，宝宝出游"></a>二，宝宝出游</h3><p>1，宝宝闹情绪的原因：</p><p>​    1）没有安全感</p><p>​    2）对周围环境敏感</p><p>​    3）生理时钟打乱</p><p>2，出游时家长要准备宝宝的贴身物品，可以安抚宝宝情绪。</p><p>3，宝宝哭闹解决方法：</p><p>​    1）了解哭闹原因</p><p>​    2）家长稳定情绪</p><p>​    3）重复宝宝的最后一句话</p><p>4，出游必备单品：餐具盒，一次性接洒围嘴，免洗洗手液，腰凳，防走失包，防走失手环。折叠脸盆，如厕马桶盖或尿袋，香蕉保护盒，薰衣草精油驱蚊虫、安抚情绪，甜橙精油克服水土不服引发的便秘和腹泻（滴在父母的手掌心搓搓），鲜艳的衣服便于寻找。</p><p>5，橙色的衣服更容易安抚宝宝的情绪。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;拜托了妈妈 2016-09-20 期，2016-09-27 期&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;一，给宝宝挑鞋&quot;&gt;&lt;a href=&quot;#一，给宝宝挑鞋&quot; class=&quot;headerlink&quot; title=&quot;一，给宝宝挑鞋&quot;&gt;&lt;/a
      
    
    </summary>
    
      <category term="生活" scheme="http://xuzhijun.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="生活" scheme="http://xuzhijun.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="奶爸" scheme="http://xuzhijun.github.io/tags/%E5%A5%B6%E7%88%B8/"/>
    
      <category term="选鞋" scheme="http://xuzhijun.github.io/tags/%E9%80%89%E9%9E%8B/"/>
    
      <category term="出游" scheme="http://xuzhijun.github.io/tags/%E5%87%BA%E6%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>《ECMAScript 6 入门 - 阮一峰》阅读笔记：2, 变量的解构赋值</title>
    <link href="http://xuzhijun.github.io/2016/10/19/javascript-es6-2-destructuring/"/>
    <id>http://xuzhijun.github.io/2016/10/19/javascript-es6-2-destructuring/</id>
    <published>2016-10-19T05:00:00.000Z</published>
    <updated>2017-12-26T12:51:23.375Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一，数组的解构赋值"><a href="#一，数组的解构赋值" class="headerlink" title="一，数组的解构赋值"></a>一，数组的解构赋值</h3><h4 id="1，基本用法"><a href="#1，基本用法" class="headerlink" title="1，基本用法"></a>1，基本用法</h4><p>从数组中提取值，按照对应位置，对变量赋值。这种写法属于“模式匹配”，只要等号两边的模式相同，左边的变量就会被赋予对应的值。</p><p>解构成功的例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 完全解构</span></span><br><span class="line"><span class="keyword">let</span> [a, b, c] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">a <span class="comment">// 1</span></span><br><span class="line">b <span class="comment">// 2</span></span><br><span class="line">c <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [foo, [[bar], baz]] = [<span class="number">1</span>, [[<span class="number">2</span>], <span class="number">3</span>]];</span><br><span class="line">foo <span class="comment">// 1</span></span><br><span class="line">bar <span class="comment">// 2</span></span><br><span class="line">baz <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [ , , third] = [<span class="string">"foo"</span>, <span class="string">"bar"</span>, <span class="string">"baz"</span>];</span><br><span class="line">third <span class="comment">// "baz"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [x, , y] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">x <span class="comment">// 1</span></span><br><span class="line">y <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [head, ...tail] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line">head <span class="comment">// 1</span></span><br><span class="line">tail <span class="comment">// [2, 3, 4]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 不完全解构：即等号左边的模式，只匹配一部分的等号右边的数组</span></span><br><span class="line"><span class="keyword">let</span> [x, y] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">x <span class="comment">// 1</span></span><br><span class="line">y <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [a, [b], d] = [<span class="number">1</span>, [<span class="number">2</span>, <span class="number">3</span>], <span class="number">4</span>];</span><br><span class="line">a <span class="comment">// 1</span></span><br><span class="line">b <span class="comment">// 2</span></span><br><span class="line">d <span class="comment">// 4</span></span><br></pre></td></tr></table></figure><p>解构不成功，变量的值就等于undefined。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [foo] = [];</span><br><span class="line">foo <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">let</span> [bar, foo] = [<span class="number">1</span>];</span><br><span class="line">foo <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>如果等号的右边不是数组，或者严格地说，不是可遍历的结构，那么将会报错。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 错误的解构</span></span><br><span class="line"><span class="comment">// 转为对象后不具备 Iterator 接口</span></span><br><span class="line"><span class="keyword">let</span> [foo] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> [foo] = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">let</span> [foo] = <span class="literal">NaN</span>;</span><br><span class="line"><span class="keyword">let</span> [foo] = <span class="literal">undefined</span>;</span><br><span class="line"><span class="keyword">let</span> [foo] = <span class="literal">null</span>;</span><br><span class="line"><span class="comment">// 本身不具备 Iterator 接口</span></span><br><span class="line"><span class="keyword">let</span> [foo] = &#123;&#125;;</span><br></pre></td></tr></table></figure><p>所以，<strong>只要某种数据结构具有 Iterator 接口，都可以采用数组形式的解构赋值</strong>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [x, y, z] = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]);</span><br><span class="line">x <span class="comment">// "a"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// fibs是一个 Generator 函数，原生具有 Iterator 接口。解构赋值会依次从这个接口获取值。</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">fibs</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> b = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">yield</span> a;</span><br><span class="line">    [a, b] = [b, a + b];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [first, second, third, fourth, fifth, sixth] = fibs();</span><br><span class="line">sixth <span class="comment">// 5</span></span><br></pre></td></tr></table></figure><h4 id="2，默认值"><a href="#2，默认值" class="headerlink" title="2，默认值"></a>2，默认值</h4><p>解构赋值允许指定默认值，ES6 内部使用严格相等运算符（===），判断一个位置是否有值。<br>所以，只有数组成员严格等于（===）undefined，默认值是才会生效的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [foo = <span class="literal">true</span>] = [];</span><br><span class="line">foo <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [x, y = <span class="string">'b'</span>] = [<span class="string">'a'</span>]; <span class="comment">// x='a', y='b'</span></span><br><span class="line"><span class="keyword">let</span> [x, y = <span class="string">'b'</span>] = [<span class="string">'a'</span>, <span class="literal">undefined</span>]; <span class="comment">// x='a', y='b'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [x = <span class="number">1</span>] = [<span class="literal">undefined</span>];</span><br><span class="line">x <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [x = <span class="number">1</span>] = [<span class="literal">null</span>];</span><br><span class="line">x <span class="comment">// null</span></span><br></pre></td></tr></table></figure><p>默认值的表达式是惰性求值的，即只有在用到的时候，才会求值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'aaa'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 因为x能取到值，所以函数f根本不会执行。</span></span><br><span class="line"><span class="keyword">let</span> [x = f()] = [<span class="number">1</span>];</span><br><span class="line">x <span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 上面的代码其实等价于下面的代码。</span></span><br><span class="line"><span class="keyword">let</span> x;</span><br><span class="line"><span class="keyword">if</span> ([<span class="number">1</span>][<span class="number">0</span>] === <span class="literal">undefined</span>) &#123;</span><br><span class="line">  x = f();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  x = [<span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>默认值可以引用解构赋值的其他变量，但该变量必须已经声明。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [x = <span class="number">1</span>, y = x] = [];     <span class="comment">// x=1; y=1</span></span><br><span class="line"><span class="keyword">let</span> [x = <span class="number">1</span>, y = x] = [<span class="number">2</span>];    <span class="comment">// x=2; y=2</span></span><br><span class="line"><span class="keyword">let</span> [x = <span class="number">1</span>, y = x] = [<span class="number">1</span>, <span class="number">2</span>]; <span class="comment">// x=1; y=2</span></span><br><span class="line"><span class="keyword">let</span> [x = y, y = <span class="number">1</span>] = [];     <span class="comment">// ReferenceError: x用到默认值y时，y还没有声明。</span></span><br></pre></td></tr></table></figure><h3 id="二，对象的解构赋值"><a href="#二，对象的解构赋值" class="headerlink" title="二，对象的解构赋值"></a>二，对象的解构赋值</h3><p>对象的解构与数组有一个重要的不同。<br>数组的元素是按次序排列的，变量的取值由它的位置决定；<br>而对象的属性没有次序，变量必须与属性同名，才能取到正确的值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; bar, foo &#125; = &#123; <span class="attr">foo</span>: <span class="string">"aaa"</span>, <span class="attr">bar</span>: <span class="string">"bbb"</span> &#125;;</span><br><span class="line">foo <span class="comment">// "aaa"</span></span><br><span class="line">bar <span class="comment">// "bbb"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123; baz &#125; = &#123; <span class="attr">foo</span>: <span class="string">"aaa"</span>, <span class="attr">bar</span>: <span class="string">"bbb"</span> &#125;;</span><br><span class="line">baz <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>如果变量名与属性名不一致，必须写成下面这样。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一，数组的解构赋值&quot;&gt;&lt;a href=&quot;#一，数组的解构赋值&quot; class=&quot;headerlink&quot; title=&quot;一，数组的解构赋值&quot;&gt;&lt;/a&gt;一，数组的解构赋值&lt;/h3&gt;&lt;h4 id=&quot;1，基本用法&quot;&gt;&lt;a href=&quot;#1，基本用法&quot; class=&quot;head
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://xuzhijun.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript ES6" scheme="http://xuzhijun.github.io/tags/JavaScript-ES6/"/>
    
  </entry>
  
  <entry>
    <title>奶爸笔记（二十五）</title>
    <link href="http://xuzhijun.github.io/2016/10/18/life-anewfather25/"/>
    <id>http://xuzhijun.github.io/2016/10/18/life-anewfather25/</id>
    <published>2016-10-18T07:00:00.000Z</published>
    <updated>2016-10-19T14:03:03.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>拜托了妈妈 2016-08-30 期，2016-09-06 期</p></blockquote><h3 id="一，宝宝秋季腹泻"><a href="#一，宝宝秋季腹泻" class="headerlink" title="一，宝宝秋季腹泻"></a>一，宝宝秋季腹泻</h3><p>1，由轮状病毒引发的小儿腹泻又称秋季腹泻，多发于秋冬季节，一般会持续 7～10 天。</p><p>2，秋季腹泻是具有传染性的疾病，一般会通过患病儿童的<strong>排泄物</strong>，<strong>呕吐物</strong>或<strong>接触日常用品</strong>及<strong>玩具</strong>进行传播。</p><p>3，秋季腹泻次数多，疾病急，还会引发宝宝发烧，呕吐，脱水等一系列症状。</p><p>4，宝宝腹泻可先将宝宝大便送往医院化验判断如何治疗。</p><p>5，让宝宝多接触大自然，不要过度保护。</p><p>6，宝宝腹泻导致脱水可使用口服补液盐补充水分和电解质。</p><p>7，秋季腹泻初期尽量避免摄入高膳食纤维食物。</p><p>8，秋季腹泻喂食阶段：</p><p>​    1）阶段一：白米粥</p><p>​    2）阶段二：白米粥＋肉泥（自制肉松）</p><p>​    3）阶段三：白米粥＋根茎类蔬菜</p><p>​    4）阶段四：水果＋叶菜类</p><h3 id="二，宝宝的睡眠问题"><a href="#二，宝宝的睡眠问题" class="headerlink" title="二，宝宝的睡眠问题"></a>二，宝宝的睡眠问题</h3><p>1，入睡困难的原因：</p><p>​    1）作息安排不够好，没有形成很好的生物钟。</p><p>​    2）发育不完善，惊跳反射也叫摩罗反应，可以用襁褓裹住。</p><p>​    3）规律的作息时间是好睡眠的主要因素。</p><p>2，四个月内的宝宝每三个小时一个循环周期，包括：先吃，再玩，接着睡，剩下的就是你的时间。</p><p>3，奶睡的坏处：</p><p>​    1）吃着睡，吃的少，吃的不够，醒来的时间就会很快。</p><p>​    2）奶睡影响真正的入睡质量。</p><p>​    3）反复吃，没有饥饱的过程。</p><p>4，玩的重要性，吃完后需要一个消化的过程，需要有疲惫感。</p><p>5，奶睡和抱睡是造成宝宝夜啼和夜醒的原因，剥夺了宝宝独自入睡能力的学习和成长的过程。</p><p>6，从宝宝的哭声鉴别是否有疾病，疼痛的哭声比较尖锐。</p><p>7，宝宝哭闹遵循“黄金五分钟”原则。</p><p>8，宝宝出现磨牙的情况多为病症。</p><p>9，宝宝打鼾是呼吸道受到阻碍，常见为淋巴系统增值，鼻腔骨骼结构出现问题，长期会影响脑部发育。</p><p>10，睡眠环境是影响宝宝睡眠的关键因素。</p><h3 id="三，问答"><a href="#三，问答" class="headerlink" title="三，问答"></a>三，问答</h3><p>1，当宝宝患有秋季腹泻在正确的护理下，一般几天能自愈？</p><p>​    A）3～5 天</p><p>​    B）5～7 天</p><p>​    <strong>C）7～10 天</strong></p><p>2，当宝宝患有秋季腹泻的初期，能吃以下哪类食物？</p><p>​    <strong>A）大米粥</strong></p><p>​    B）杂粮粥</p><p>​    C）杂粮水果粥</p><p>3，一至两岁的宝宝每日的睡眠总量为</p><p>​    A）12～13 小时</p><p>​    <strong>B）13～14 小时</strong></p><p>​    C）16～18 小时</p><p>4，培养宝宝的睡眠规律，正确的方法是</p><p>​    <strong>A）吃－玩－睡</strong></p><p>​    B）吃－睡－玩</p><p>​    C）睡－吃－玩</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;拜托了妈妈 2016-08-30 期，2016-09-06 期&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;一，宝宝秋季腹泻&quot;&gt;&lt;a href=&quot;#一，宝宝秋季腹泻&quot; class=&quot;headerlink&quot; title=&quot;一，宝宝秋季腹泻&quot;&gt;
      
    
    </summary>
    
      <category term="生活" scheme="http://xuzhijun.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="生活" scheme="http://xuzhijun.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="奶爸" scheme="http://xuzhijun.github.io/tags/%E5%A5%B6%E7%88%B8/"/>
    
      <category term="腹泻" scheme="http://xuzhijun.github.io/tags/%E8%85%B9%E6%B3%BB/"/>
    
      <category term="睡眠" scheme="http://xuzhijun.github.io/tags/%E7%9D%A1%E7%9C%A0/"/>
    
  </entry>
  
  <entry>
    <title>《ECMAScript 6 入门 - 阮一峰》阅读笔记：1, let 和 const 命令</title>
    <link href="http://xuzhijun.github.io/2016/10/12/javascript-es6-1-let-and-const/"/>
    <id>http://xuzhijun.github.io/2016/10/12/javascript-es6-1-let-and-const/</id>
    <published>2016-10-12T13:15:00.000Z</published>
    <updated>2017-12-26T12:51:22.049Z</updated>
    
    <content type="html"><![CDATA[<h3 id="let-和-const-命令"><a href="#let-和-const-命令" class="headerlink" title="let 和 const 命令"></a>let 和 const 命令</h3><p>let 命令是用来声明<strong>块级作用域</strong>的<strong>变量</strong>，</p><p>const 命令用来声明<strong>块级作用域</strong>的<strong>常量</strong>。</p><h4 id="let-在-for-循环中的应用"><a href="#let-在-for-循环中的应用" class="headerlink" title="let 在 for 循环中的应用"></a>let 在 for 循环中的应用</h4><p>for循环的计数器适合用 let 来声明。</p><h5 id="1）错误的使用闭包"><a href="#1）错误的使用闭包" class="headerlink" title="1）错误的使用闭包"></a>1）错误的使用闭包</h5><p>变量 i 是 let 声明的，当前的i只在本轮循环有效，所以每一次循环的 i 其实都是一个新的变量。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 错误的闭包</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>; i&lt;=<span class="number">5</span>; i++) &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span> <span class="title">timer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">  &#125;, i*<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ES5的解决方案</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">1</span>; i&lt;=<span class="number">5</span>; i++) &#123;</span><br><span class="line">  (<span class="function"><span class="keyword">function</span> (<span class="params">j</span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span> <span class="title">timer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(j);</span><br><span class="line">    &#125;, j*<span class="number">1000</span>);</span><br><span class="line">  &#125;)(i); </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ES6的解决方案</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">1</span>; i&lt;=<span class="number">5</span>; i++) &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span> <span class="title">timer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">  &#125;,i*<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2）for-循环的特别之处"><a href="#2）for-循环的特别之处" class="headerlink" title="2）for 循环的特别之处"></a>2）for 循环的特别之处</h5><p>设置循环变量的那部分是一个<strong>父作用域</strong>，而循环体内部是一个单独的<strong>子作用域</strong>。</p><p>这和下文中会提到的<strong>暂时性死区</strong>不同。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">let</span> i = <span class="string">'abc'</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// abc</span></span><br><span class="line"><span class="comment">// abc</span></span><br><span class="line"><span class="comment">// abc</span></span><br></pre></td></tr></table></figure><h4 id="const-的本质"><a href="#const-的本质" class="headerlink" title="const 的本质"></a>const 的本质</h4><p>const 一旦声明变量，就必须立即初始化，不能留到以后赋值。</p><p>const 实际上保证的，并不是变量的值不得改动，而是变量指向的那个内存地址不得改动。</p><p>对于复合类型的数据，变量指向的内存地址，保存的只是一个指针，const只能保证这个指针是固定的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为 foo 添加一个属性，可以成功</span></span><br><span class="line">foo.prop = <span class="number">123</span>;</span><br><span class="line">foo.prop <span class="comment">// 123</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将 foo 指向另一个对象，就会报错</span></span><br><span class="line">foo = &#123;&#125;; <span class="comment">// TypeError: "foo" is read-only</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> a = [];</span><br><span class="line">a.push(<span class="string">'Hello'</span>); <span class="comment">// 可执行</span></span><br><span class="line">a.length = <span class="number">0</span>;    <span class="comment">// 可执行</span></span><br><span class="line">a = [<span class="string">'Dave'</span>];    <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure><p>将对象彻底冻结的函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> constantize = <span class="function">(<span class="params">obj</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">Object</span>.freeze(obj);</span><br><span class="line">  <span class="built_in">Object</span>.keys(obj).forEach( <span class="function">(<span class="params">key, i</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> ( <span class="keyword">typeof</span> obj[key] === <span class="string">'object'</span> ) &#123;</span><br><span class="line">      constantize( obj[key] );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><h4 id="1）不存在变量提升"><a href="#1）不存在变量提升" class="headerlink" title="1）不存在变量提升"></a>1）不存在变量提升</h4><p>所谓『<strong>变量提升</strong>』：</p><p><strong>仅</strong>发生在使用 var 命令声明变量时，该变量在声明之前便能使用，值为 undefined。</p><p>let 命令所声明的变量一定要在声明后才能使用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// var 的情况</span></span><br><span class="line"><span class="built_in">console</span>.log(foo); <span class="comment">// 输出undefined</span></span><br><span class="line"><span class="keyword">var</span> foo = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// let 的情况</span></span><br><span class="line"><span class="built_in">console</span>.log(bar); <span class="comment">// 报错ReferenceError</span></span><br><span class="line"><span class="keyword">let</span> bar = <span class="number">2</span>;</span><br></pre></td></tr></table></figure><h4 id="2）存在暂时性死区"><a href="#2）存在暂时性死区" class="headerlink" title="2）存在暂时性死区"></a>2）存在暂时性死区</h4><p>ES6明确规定，如果区块中存在 let 和 const 命令，这个区块对这些命令声明的变量，从一开始就形成了封闭作用域。凡是在声明之前就使用这些变量，就会报错。</p><p>代码块内，在使用 let 和 const 命令声明变量之前，该变量都是不可用的。<br>在语法上，把这个区域称为“<strong>暂时性死区</strong>”（temporal dead zone，简称 TDZ）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="comment">// TDZ开始</span></span><br><span class="line">  tmp = <span class="string">'abc'</span>; <span class="comment">// ReferenceError</span></span><br><span class="line">  <span class="built_in">console</span>.log(tmp); <span class="comment">// ReferenceError</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> tmp; <span class="comment">// TDZ结束</span></span><br><span class="line">  <span class="built_in">console</span>.log(tmp); <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line">  tmp = <span class="number">123</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(tmp); <span class="comment">// 123</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>『<strong>暂时性死区</strong>』让 <strong>typeof</strong> 命令不再是一个百分之百安全的操作。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> undeclared_variable <span class="comment">// "undefined"</span></span><br><span class="line"><span class="keyword">typeof</span> x; <span class="comment">// ReferenceError</span></span><br><span class="line"><span class="keyword">let</span> x;</span><br></pre></td></tr></table></figure><p>因为『<strong>暂时性死区</strong>』的存在，函数参数的默认值未声明就使用，也会报错。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params">x = y, y = <span class="number">2</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [x, y];</span><br><span class="line">&#125;</span><br><span class="line">bar(); <span class="comment">// 报错</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params">x = <span class="number">2</span>, y = x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [x, y];</span><br><span class="line">&#125;</span><br><span class="line">bar(); <span class="comment">// [2, 2]</span></span><br></pre></td></tr></table></figure><p>使用 let 声明变量时，变量在还没有声明完成前使用，也会报错。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不报错</span></span><br><span class="line"><span class="keyword">var</span> x = x;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">let</span> x = x;</span><br><span class="line"><span class="comment">// ReferenceError: x is not defined</span></span><br></pre></td></tr></table></figure><p><strong>暂时性死区的本质</strong>：</p><p>只要一进入当前作用域，所要使用的变量就已经存在了，但是不可获取，只有等到声明变量的那一行代码出现后，才可以获取和使用该变量。</p><h4 id="3）不允许重复声明"><a href="#3）不允许重复声明" class="headerlink" title="3）不允许重复声明"></a>3）不允许重复声明</h4><p>在相同作用域内，不允许重复声明，受『<strong>暂时性死区</strong>』影响的变量。</p><h4 id="4）do-表达式"><a href="#4）do-表达式" class="headerlink" title="4）do 表达式"></a>4）do 表达式</h4><p>本质上，块级作用域是一个语句，将多个操作封装在一起，没有返回值。</p><p>在块级作用域以外，没有办法得到快内变量的值，因为块级作用域不返回值，除非该变量是全局变量。</p><p>现在有一个<strong>提案</strong>，使得块级作用域可以变为表达式，也就是说可以返回值，办法就是在块级作用域之前加上do，使它变为 <strong>do 表达式</strong>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="keyword">do</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> t = f();</span><br><span class="line">  t * t + <span class="number">1</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="顶层对象"><a href="#顶层对象" class="headerlink" title="顶层对象"></a>顶层对象</h3><p>顶层对象，在浏览器环境指的是window对象，在Node指的是global对象。</p><p>ES5之中，顶层对象的属性与全局变量是等价的。</p><p>ES6为了保持兼容性，var命令和function命令声明的全局变量，依旧是顶层对象的属性；</p><p>另一方面规定，let命令、const命令、class命令声明的全局变量，不属于顶层对象的属性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="comment">// 如果在Node的REPL环境，可以写成global.a</span></span><br><span class="line"><span class="comment">// 或者采用通用方法，写成this.a</span></span><br><span class="line"><span class="built_in">window</span>.a <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> b = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">window</span>.b <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>ES5 的顶层对象在各种实现里面是<strong>不统一</strong>的。</p><ul><li>浏览器里面，顶层对象是 <strong>window</strong>，但 Node 和 Web Worker 没有window。</li><li>浏览器和 Web Worker 里面，<strong>self</strong> 也指向顶层对象，但是 Node 没有 self。</li><li>Node 里面，顶层对象是 <strong>global</strong>，但其他环境都不支持。</li></ul><p>同一段代码为了能够在各种环境，都能取到顶层对象，现在一般是使用this变量，但是有<strong>局限性</strong>。</p><ul><li>全局环境中，this 会返回顶层对象。<br>但是，Node 模块和 ES6 模块中，this 返回的是当前模块。</li><li>函数里面的 this，如果函数不是作为对象的方法运行，而是单纯作为函数运行，this 会指向顶层对象。<br>但是，严格模式下，这时this会返回undefined。</li><li>不管是严格模式，还是普通模式，new Function(‘return this’)()，总是会返回全局对象。<br>但是，如果浏览器用了CSP（Content Security Policy，内容安全政策），那么eval、new Function这些方法都可能无法使用。</li></ul><p>两种勉强可以取到顶层对象的方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法一</span></span><br><span class="line">(<span class="keyword">typeof</span> <span class="built_in">window</span> !== <span class="string">'undefined'</span></span><br><span class="line">   ? <span class="built_in">window</span></span><br><span class="line">   : (<span class="keyword">typeof</span> process === <span class="string">'object'</span> &amp;&amp;</span><br><span class="line">      <span class="keyword">typeof</span> <span class="built_in">require</span> === <span class="string">'function'</span> &amp;&amp;</span><br><span class="line">      <span class="keyword">typeof</span> global === <span class="string">'object'</span>)</span><br><span class="line">     ? global</span><br><span class="line">     : <span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法二</span></span><br><span class="line"><span class="keyword">var</span> getGlobal = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> self !== <span class="string">'undefined'</span>) &#123; <span class="keyword">return</span> self; &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">window</span> !== <span class="string">'undefined'</span>) &#123; <span class="keyword">return</span> <span class="built_in">window</span>; &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> global !== <span class="string">'undefined'</span>) &#123; <span class="keyword">return</span> global; &#125;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'unable to locate global object'</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>现在有一个<strong>提案</strong>，在语言标准的层面，引入global作为顶层对象。<br>也就是说，在所有环境下，global都是存在的，都可以从它拿到顶层对象。</p><p>垫片库 <strong>system.global</strong> 模拟了这个提案，可以在所有环境拿到 global。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// CommonJS 的写法</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">'system.global/shim'</span>)();</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6 模块的写法</span></span><br><span class="line"><span class="keyword">import</span> shim <span class="keyword">from</span> <span class="string">'system.global/shim'</span>;</span><br><span class="line">shim();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将顶层对象放入变量global</span></span><br><span class="line"><span class="comment">// CommonJS 的写法</span></span><br><span class="line"><span class="keyword">var</span> global = <span class="built_in">require</span>(<span class="string">'system.global'</span>)();</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6 模块的写法</span></span><br><span class="line"><span class="keyword">import</span> getGlobal <span class="keyword">from</span> <span class="string">'system.global'</span>;</span><br><span class="line"><span class="keyword">const</span> global = getGlobal();</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;let-和-const-命令&quot;&gt;&lt;a href=&quot;#let-和-const-命令&quot; class=&quot;headerlink&quot; title=&quot;let 和 const 命令&quot;&gt;&lt;/a&gt;let 和 const 命令&lt;/h3&gt;&lt;p&gt;let 命令是用来声明&lt;strong&gt;块级作
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://xuzhijun.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript ES6" scheme="http://xuzhijun.github.io/tags/JavaScript-ES6/"/>
    
  </entry>
  
  <entry>
    <title>奶爸笔记（二十四）</title>
    <link href="http://xuzhijun.github.io/2016/08/31/life-anewfather24/"/>
    <id>http://xuzhijun.github.io/2016/08/31/life-anewfather24/</id>
    <published>2016-08-31T05:00:00.000Z</published>
    <updated>2016-08-31T14:58:30.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>拜托了妈妈 2016-08-16 期，2016-08-23 期</p></blockquote><h3 id="一，孕前营养"><a href="#一，孕前营养" class="headerlink" title="一，孕前营养"></a>一，孕前营养</h3><p>1，吃叶酸，怀孕前三个月开始吃，吃到怀孕三个月。</p><p>2，孕期过量服用叶酸会导致宝宝免疫力低下，发育迟缓。</p><p>3，DNA 从怀孕 4 个月开始，吃到哺乳期 6 个月，建议每天吃 300 mg，极限是 3000 mg。</p><p>4，孕晚期 7 个月开始补钙到哺乳期全程，每天 1000 - 1300 mg。</p><h3 id="二，辅食"><a href="#二，辅食" class="headerlink" title="二，辅食"></a>二，辅食</h3><p>1，建议从第七个月开始添加辅食，不能早于四个月，不能晚于八个月。</p><p>2，特殊情况下，每日达到 1000 毫升奶量，仍感觉饿，体重不长，才建议添加辅食。</p><p>3，成品的迷糊含铁，更适合宝宝。</p><p>4，六个月宝宝容易发生缺铁性贫血，尤其是母乳喂养，母乳中含铁非常少。</p><p>5，加辅食的顺序：含铁的米粉，红肉泥（水煮牛羊肉，含肌红蛋白），肝泥，蛋黄泥，蔬菜泥果泥。</p><p>6，一岁之前不能给宝宝吃盐，就是减少钠的摄入，防止宝宝挑食，埋下成年后高血压心血管病的隐患。</p><p>7，成人每日盐摄入量为 6 克，1 岁到 2 岁宝宝每天盐摄入量不超过 1 克。</p><p>8，辅食添加表：</p><table><thead><tr><th>月龄</th><th>辅食</th></tr></thead><tbody><tr><td>6月龄</td><td>泥状、糊状食物</td></tr><tr><td>8~9月龄</td><td>小颗粒状食物</td></tr><tr><td>10~12月龄</td><td>块状食物</td></tr><tr><td>12月龄以上</td><td>淡口味家庭食物</td></tr></tbody></table><h3 id="三，家庭小药箱"><a href="#三，家庭小药箱" class="headerlink" title="三，家庭小药箱"></a>三，家庭小药箱</h3><p>1，儿童60%的疾病是可以自愈的。</p><p>2，家庭小药箱每三个月检查一次。</p><p>3，宝宝每日应补充400个国际单位的维生素D。</p><p>4，家庭小药箱必备药</p><p>​    1）发烧：对乙酰氨基酚（首选退烧药）、布洛芬</p><p>​    2）鼻塞：生理性海水鼻腔喷雾剂</p><p>​    3）过敏：氯雷他定（抗组胺）</p><p>​    4）腹泻：口服补液盐（防止脱水）、蒙脱石散、微生态调节剂（益生菌调节肠道菌群）</p><p>​    5）咳嗽：盐酸氨溴索（有痰）、乙酰半胱氨酸（有痰）、氢溴酸右美沙芬（干咳）</p><p>​    6）便秘：开塞露、乳果糖</p><p>​    7）胀气：西甲硅油（缓解婴儿肠绞痛）</p><p>​    8）皮肤护理：炉甘石洗剂（止痒）、红霉素眼药膏（破溃）</p><p>​    9）外伤：碘伏（伤口消毒）、创可贴</p><p>5，空腹：指饭前一小时，或饭后两小时。</p><p>6，合理用药原则</p><p>​    1）能不用药就不用药</p><p>​    2）能少用药就不多用药</p><p>​    3）能口服就不注射</p><h3 id="四，问答"><a href="#四，问答" class="headerlink" title="四，问答"></a>四，问答</h3><p>1，产妇正常生产多久子宫降入骨盆？</p><p>​    A）4 天左右</p><p>​    <strong>B）10 天左右</strong></p><p>​    C）20 天左右</p><p>2，准妈妈们每天需要补充多少DHA？</p><p>​    A）200 毫克</p><p>​    <strong>B）300 毫克</strong></p><p>​    C）400 毫克</p><p>3，在小儿热量需要的分配中哪项比例最高？</p><p>​    <strong>A）基础代谢</strong></p><p>​    B）生长与储存</p><p>​    C）排泄的损耗</p><p>4，对于儿童相对安全的眼用抗生素</p><p>​    A）庆大霉素</p><p>​    <strong>B）红霉素</strong></p><p>​    C）氯霉素</p><p>5，2 ~ 4岁的宝宝每天盐摄入量应该少于多少？</p><p>​    A）1 克</p><p>​    <strong>B）2 克</strong></p><p>​    C）4 克</p><p>6，幼儿急疹的病原体是？</p><p>​    A）腺病毒</p><p>​    <strong>B）人类疱疹病毒</strong></p><p>​    C）轮状病毒</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;拜托了妈妈 2016-08-16 期，2016-08-23 期&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;一，孕前营养&quot;&gt;&lt;a href=&quot;#一，孕前营养&quot; class=&quot;headerlink&quot; title=&quot;一，孕前营养&quot;&gt;&lt;/a&gt;一，
      
    
    </summary>
    
      <category term="生活" scheme="http://xuzhijun.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="生活" scheme="http://xuzhijun.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="奶爸" scheme="http://xuzhijun.github.io/tags/%E5%A5%B6%E7%88%B8/"/>
    
      <category term="孕前营养" scheme="http://xuzhijun.github.io/tags/%E5%AD%95%E5%89%8D%E8%90%A5%E5%85%BB/"/>
    
      <category term="辅食" scheme="http://xuzhijun.github.io/tags/%E8%BE%85%E9%A3%9F/"/>
    
      <category term="用药" scheme="http://xuzhijun.github.io/tags/%E7%94%A8%E8%8D%AF/"/>
    
  </entry>
  
  <entry>
    <title>奶爸笔记（二十三）</title>
    <link href="http://xuzhijun.github.io/2016/08/26/life-anewfather23/"/>
    <id>http://xuzhijun.github.io/2016/08/26/life-anewfather23/</id>
    <published>2016-08-26T03:00:00.000Z</published>
    <updated>2016-08-31T13:31:11.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>拜托了妈妈 2016-08-09 期</p></blockquote><h3 id="一，上火"><a href="#一，上火" class="headerlink" title="一，上火"></a>一，上火</h3><p>1，宝宝上火分为虚火和实火</p><table><thead><tr><th></th><th>实火</th><th>虚火</th></tr></thead><tbody><tr><td>原因</td><td>饮食热量太高，捂得过多</td><td>热病伤阴</td></tr><tr><td>表现</td><td>红头涨脸，爱发脾气，爱哭爱闹，舌苔厚黄，亢奋，大便干燥</td><td>手心热，盗汗，烦躁，喜欢趴睡，睡不安稳，反复口腔溃疡</td></tr><tr><td>怎么办</td><td>清热，苦瓜，莲子，绿豆</td><td>滋阴，猕猴桃，梨，火龙果，白菜，黄瓜，百合</td></tr></tbody></table><p>2，肝开窍于目，宝宝眼屎多、结膜炎、眼睛红、起针眼，多为肝火旺</p><p>3，心开窍于舌，舌尖红、地图舌，多为心火旺</p><p>4，脾开窍于口，口腔异味、舌苔厚黄、吃得多、大便干，多为脾胃火旺</p><p>5，肺开窍于鼻，咳嗽、黄痰、黄鼻涕、流鼻血，多为肺火旺</p><p>6，肾开窍于耳，反复中耳炎，多为肾火旺，肾火多为虚火</p><p>7，脾胃上火，多喝水可祛火。</p><p>8，五脏和手指末端的对应关系，脾经（拇指）、食指（肝经）、中指（心经）、无名指（肺经）、小指（肾经）。</p><p>9，不同的火，推不同的手指，手指末端最后一节，向指尖方向推，二百次左右。</p><p>10，发烧推天河水，清热作用，二指沾30度酒精，腕横纹推向肘横纹，一百到二百次。</p><p>11，在宝宝脚心，人字纹交接凹陷处，根据不同的火贴不同的中药贴一晚，可祛火。</p><h3 id="二，呼吸道感染"><a href="#二，呼吸道感染" class="headerlink" title="二，呼吸道感染"></a>二，呼吸道感染</h3><p>1，6 岁以下宝宝免疫系统未发育成熟，易生病。</p><p>2，反复呼吸道感染以一年内生病的次数为衡量标准。</p><p>3，一年内2次以上肺炎或者支气管炎，疑为反复呼吸道感染，下呼吸道感染。</p><p>4，反复呼吸道感染的诱因</p><p>​    1）宝宝自身呼吸道结构</p><p>​    2）30%的反复呼吸道感染由过敏引起，越小养宠物，越会耐受。</p><p>​    3）环境因素，吸烟的尼古丁问题，家具的甲醛问题</p><p>5，90%以上的呼吸道感染都是病毒感染引起，免疫系统会受到抑制。</p><p>6，要保证彻底恢复，鼻腔通畅，食欲正常，排便通畅，再送入幼儿园。</p><p>7，细菌感染的话，抗生素一定要足疗程，否则病情会反复。</p><p>8，推荐打自费的肺炎疫苗。</p><p>9，一岁以内，每个月都要体检，一岁以后到十八岁，每年体检一次。</p><h3 id="三，问答"><a href="#三，问答" class="headerlink" title="三，问答"></a>三，问答</h3><p>1，婴幼儿上火时大便秘结属于下述哪个方面？</p><p>​    A）心火</p><p>​    B）肺火</p><p>​    <strong>C）胃火</strong></p><p>2，以下最容易引起夏季腹泻的是？</p><p>​    A）轮状病毒</p><p>​    <strong>B）大肠杆菌</strong></p><p>​    C）诺瓦克病毒</p><p>3，婴幼儿平均每年呼吸感染的次数是？</p><p>​    A）1 ~ 3 次</p><p>​    <strong>B）6 ~ 10 次</strong></p><p>​    C）11 ~ 15 次</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;拜托了妈妈 2016-08-09 期&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;一，上火&quot;&gt;&lt;a href=&quot;#一，上火&quot; class=&quot;headerlink&quot; title=&quot;一，上火&quot;&gt;&lt;/a&gt;一，上火&lt;/h3&gt;&lt;p&gt;1，宝宝上火分为虚
      
    
    </summary>
    
      <category term="生活" scheme="http://xuzhijun.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="生活" scheme="http://xuzhijun.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="奶爸" scheme="http://xuzhijun.github.io/tags/%E5%A5%B6%E7%88%B8/"/>
    
      <category term="祛火" scheme="http://xuzhijun.github.io/tags/%E7%A5%9B%E7%81%AB/"/>
    
      <category term="口腔溃疡" scheme="http://xuzhijun.github.io/tags/%E5%8F%A3%E8%85%94%E6%BA%83%E7%96%A1/"/>
    
      <category term="推拿" scheme="http://xuzhijun.github.io/tags/%E6%8E%A8%E6%8B%BF/"/>
    
      <category term="呼吸道感染" scheme="http://xuzhijun.github.io/tags/%E5%91%BC%E5%90%B8%E9%81%93%E6%84%9F%E6%9F%93/"/>
    
  </entry>
  
  <entry>
    <title>奶爸笔记（二十二）</title>
    <link href="http://xuzhijun.github.io/2016/08/25/life-anewfather22/"/>
    <id>http://xuzhijun.github.io/2016/08/25/life-anewfather22/</id>
    <published>2016-08-25T06:00:00.000Z</published>
    <updated>2016-08-25T08:17:26.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>拜托了妈妈 2016-08-02 期</p></blockquote><h3 id="一，运动"><a href="#一，运动" class="headerlink" title="一，运动"></a>一，运动</h3><p>1，提宝宝时，不要抓腿，捧头，抓手。</p><p>2，专业方面的运动不是越早越好。</p><p>3，0 ~ 1 岁，宝宝运动发育的关键期，俯卧、抬头、翻身、坐、爬行、扶站、行走。</p><p>4，1 ~ 3 岁，大脑发育逐渐成熟，2 岁的宝宝能跑、跳。</p><p>5，4 岁以后，根据天赋可以培养宝宝运动。</p><p>6，宝宝站立的最佳时间为八个半月，3 岁滑轮，4 岁舞蹈，12 岁跆拳道等。</p><p>7，家长可以为 0 ~ 6 个月婴儿做被动操。</p><p>8，通过被动操可以给宝宝做身体检查，检查肌张力是否正常。</p><p>9，被动操：</p><p>​    1）预备：婴儿仰卧，家长双手握住婴儿双手，把拇指放在婴儿手掌内，婴儿握拳。</p><p>​    2）第一节：双手前胸交叉</p><p>​    3）第二节：屈伸肘关节</p><p>​    4）第三节：伸展运动</p><p>​    5）第四节：屈伸踝关节</p><p>​    6）第五节：两腿轮流屈伸</p><p>​    7）第六节：下肢伸直上举</p><h3 id="二，益生菌"><a href="#二，益生菌" class="headerlink" title="二，益生菌"></a>二，益生菌</h3><p>1，益生菌需用37度水冲服。</p><p>2，一天中任何时间都可以服用益生菌。</p><p>3，抗生素不会影响益生菌的活性，且能治疗和预防抗生素引起的腹泻。</p><p>4，母乳中富含活性益生菌和益生元（益生菌的食物）。</p><p>5，短链益生元作用于大肠前端，长链益生元作用于大肠后端。</p><p>6，低聚半乳糖GOS为短链益生元，聚葡萄糖PDX为长链益生元。</p><p>7，根据宝宝不同年龄段，不同月龄段，胃肠道发育的成熟度选择不同性状的食物。</p><p>8，一次哺喂的量不能太多，太多会出现消化不良的问题。</p><p>9，要给宝宝提供平衡膳食。</p><h3 id="三，问答"><a href="#三，问答" class="headerlink" title="三，问答"></a>三，问答</h3><p>1，肠道在人体中扮演着什么角色？</p><p>​    A）动力器官</p><p>​    <strong>B）最大的免疫器官</strong></p><p>​    C）输送器官</p><p>2，婴幼儿的营养需求是成人的几倍？</p><p>​    A）3 倍</p><p>​    <strong>B）6 倍</strong></p><p>​    C）12 倍</p><p>3，婴幼儿的大运动发育规律是？</p><p>​    A）由左至右</p><p>​    <strong>B）由上至下</strong></p><p>​    C）由前至后</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;拜托了妈妈 2016-08-02 期&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;一，运动&quot;&gt;&lt;a href=&quot;#一，运动&quot; class=&quot;headerlink&quot; title=&quot;一，运动&quot;&gt;&lt;/a&gt;一，运动&lt;/h3&gt;&lt;p&gt;1，提宝宝时，不要
      
    
    </summary>
    
      <category term="生活" scheme="http://xuzhijun.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="生活" scheme="http://xuzhijun.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="奶爸" scheme="http://xuzhijun.github.io/tags/%E5%A5%B6%E7%88%B8/"/>
    
      <category term="运动" scheme="http://xuzhijun.github.io/tags/%E8%BF%90%E5%8A%A8/"/>
    
      <category term="被动操" scheme="http://xuzhijun.github.io/tags/%E8%A2%AB%E5%8A%A8%E6%93%8D/"/>
    
  </entry>
  
  <entry>
    <title>奶爸笔记（二十一）</title>
    <link href="http://xuzhijun.github.io/2016/08/25/life-anewfather21/"/>
    <id>http://xuzhijun.github.io/2016/08/25/life-anewfather21/</id>
    <published>2016-08-25T05:00:00.000Z</published>
    <updated>2016-08-25T05:49:22.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>拜托了妈妈 2016-07-26 期</p></blockquote><h3 id="一，育儿"><a href="#一，育儿" class="headerlink" title="一，育儿"></a>一，育儿</h3><p>1，过度喂养宝宝，肥胖几率会更高</p><p>2，开空调时需注意：</p><p>​    1）千万别对着宝宝直吹</p><p>​    2）定期清洁过滤网、通风换气</p><p>​    3）温度保持在26-28度</p><h3 id="二，中暑"><a href="#二，中暑" class="headerlink" title="二，中暑"></a>二，中暑</h3><p>1，宝宝中暑的症状，不出汗，皮肤发红。</p><p>2，中暑的前兆，热衰竭的症状，皮肤发热，不停流汗，宝宝烦躁不安、哭闹。</p><p>3， 宝宝出现热衰竭或中暑的处理方法：</p><p>​    1）移到阴凉的地方</p><p>​    2）用冷水毛巾擦拭全身，进行降温</p><p>​    3）喝冷盐水（一公升水，加入一匙盐）</p><p>4，家长观察宝宝排尿情况，及时补充水份。</p><h3 id="三，宝宝夏季蔬果"><a href="#三，宝宝夏季蔬果" class="headerlink" title="三，宝宝夏季蔬果"></a>三，宝宝夏季蔬果</h3><p>1，甜瓜（水份含量大，碱性物质）</p><p>2，火龙果</p><p>3，桃子</p><p>4，木瓜（有蛋白酶，助消化）</p><p>5，梨（钾离子含量高）</p><p>6，苦瓜</p><p>7，黄瓜（水份含量高）</p><p>8，茄子（蒸茄子，拌茄泥）</p><p>9，所有的绿叶菜</p><p>10，凉拌芹菜叶</p><p>11，冬瓜（冬瓜碱，助消化）</p><p>12，不宜多吃</p><p>​    1）荔枝（含糖量高，吃多了容易渗透性腹泻）</p><p>​    2）葡萄（吃多了会腹泻）</p><p>​    3）李子（有导泻成份）</p><h3 id="四，问答"><a href="#四，问答" class="headerlink" title="四，问答"></a>四，问答</h3><p>1，夏季宝宝最舒服的状态是？</p><p>​    <strong>A）手脚偏凉，脖子温热</strong></p><p>​    B）手、脚、脖子温热</p><p>​    C）手、脚、脖子偏凉</p><p>2，夏天最适合吃以下哪种水果？</p><p>​    A）杏</p><p>​    B）荔枝</p><p>​    <strong>C）甜瓜</strong></p><p>3，儿童夏季出现痢疾的发病占全年痢疾发病的？</p><p>​    A）30% 左右</p><p>​    B）50% 左右</p><p>​    <strong>C）70% 左右</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;拜托了妈妈 2016-07-26 期&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;一，育儿&quot;&gt;&lt;a href=&quot;#一，育儿&quot; class=&quot;headerlink&quot; title=&quot;一，育儿&quot;&gt;&lt;/a&gt;一，育儿&lt;/h3&gt;&lt;p&gt;1，过度喂养宝宝，
      
    
    </summary>
    
      <category term="生活" scheme="http://xuzhijun.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="生活" scheme="http://xuzhijun.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="奶爸" scheme="http://xuzhijun.github.io/tags/%E5%A5%B6%E7%88%B8/"/>
    
      <category term="吹空调" scheme="http://xuzhijun.github.io/tags/%E5%90%B9%E7%A9%BA%E8%B0%83/"/>
    
      <category term="中暑" scheme="http://xuzhijun.github.io/tags/%E4%B8%AD%E6%9A%91/"/>
    
      <category term="蔬果" scheme="http://xuzhijun.github.io/tags/%E8%94%AC%E6%9E%9C/"/>
    
  </entry>
  
  <entry>
    <title>奶爸笔记（二十）</title>
    <link href="http://xuzhijun.github.io/2016/08/25/life-anewfather20/"/>
    <id>http://xuzhijun.github.io/2016/08/25/life-anewfather20/</id>
    <published>2016-08-25T03:00:00.000Z</published>
    <updated>2016-08-25T05:50:02.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>拜托了妈妈 2016-07-19 期</p></blockquote><h3 id="一，儿童的语言问题"><a href="#一，儿童的语言问题" class="headerlink" title="一，儿童的语言问题"></a>一，儿童的语言问题</h3><p>1，儿童语言发育过程</p><p>​    1）0 ~ 1 岁是儿童语言准备期</p><p>​    2）1 ~ 2 岁是儿童语言发育初期</p><p>​    3）2 ~ 3 岁是儿童语言飞速发展期，容易出现语言问题，会延伸到5岁。</p><p>2，判断宝宝口吃的标准：起因困难，断句</p><p>3，哪些宝宝容易口吃？</p><p>​    1）遗传因素占40%</p><p>​    2）性格内向，敏感</p><p>​    3）强行纠正左撇子</p><p>​    4）吃食物过于细软</p><p>​    5）家长说话语速过快</p><p>4，宝宝出现口吃现象时，家长应该『当下忽略』。</p><p>​    1）耐心听宝宝说话</p><p>​    2）多于孩子交流，交流要平视，语速慢</p><p>​    3）给孩子读书，讲故事</p><p>​    4）加强口腔运动</p><h3 id="二，手足口病"><a href="#二，手足口病" class="headerlink" title="二，手足口病"></a>二，手足口病</h3><p>1，手足口是轻症传染病，并非只得一次</p><p>2，板蓝根和维生素B无法预防手足口</p><p>3，成人也会得手足口</p><p>4，手足口与疱疹性咽炎，都属于肠道病毒组引起的感染，传染力强</p><p>5，疱疹性咽炎会伴随高热 39 ~ 40 度，手足口发烧以地热为主</p><p>6，宝宝手足口的判断标准，不吃奶，不喝水，爱哭，会有咽痛</p><p>7，建议利巴韦林要慎用</p><p>8，宝宝手足口要谨防脱水</p><p>9，手足口预防大于治疗，清洗手，注意个人卫生，多喝凉水，通风，户外活动。</p><p>10，手足口的传染途径，粪便，口腔，呼吸道，唾液，喷嚏。</p><h3 id="三，问答"><a href="#三，问答" class="headerlink" title="三，问答"></a>三，问答</h3><p>1，以下有关手足口的说法正确的是？</p><p>​    A）患有手足口一定伴随发烧症状</p><p>​    B）口腔有疱疹就一定是手足口</p><p>​    <strong>C）手足口是有肠道病毒引起的传染病</strong></p><p>2，宝宝在几岁时，语言会飞速发育？</p><p>​    A）0 ~ 1 岁</p><p>​    B）1 ~ 2 岁</p><p>​    <strong>C）2 ~ 3 岁</strong></p><p>3，下列哪些是婴儿生长发育过程中具有重要作用的微量元素？</p><p>​    A）铁、锌、钙</p><p>​    B）铁、碘、铝</p><p>​    <strong>C）铁、锌、碘</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;拜托了妈妈 2016-07-19 期&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;一，儿童的语言问题&quot;&gt;&lt;a href=&quot;#一，儿童的语言问题&quot; class=&quot;headerlink&quot; title=&quot;一，儿童的语言问题&quot;&gt;&lt;/a&gt;一，儿童的语
      
    
    </summary>
    
      <category term="生活" scheme="http://xuzhijun.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="生活" scheme="http://xuzhijun.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="奶爸" scheme="http://xuzhijun.github.io/tags/%E5%A5%B6%E7%88%B8/"/>
    
      <category term="口吃" scheme="http://xuzhijun.github.io/tags/%E5%8F%A3%E5%90%83/"/>
    
      <category term="手足口病" scheme="http://xuzhijun.github.io/tags/%E6%89%8B%E8%B6%B3%E5%8F%A3%E7%97%85/"/>
    
  </entry>
  
  <entry>
    <title>奶爸笔记（十九）</title>
    <link href="http://xuzhijun.github.io/2016/08/24/life-anewfather19/"/>
    <id>http://xuzhijun.github.io/2016/08/24/life-anewfather19/</id>
    <published>2016-08-24T05:00:00.000Z</published>
    <updated>2016-08-31T13:41:59.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>拜托了妈妈 2016-07-05 期，2016-07-12 期</p></blockquote><h3 id="一，眼睛和近视遗传"><a href="#一，眼睛和近视遗传" class="headerlink" title="一，眼睛和近视遗传"></a>一，眼睛和近视遗传</h3><p>1，近视有很强的遗传倾向，后天近视也会遗传。</p><p>2，长时间看电子产品是儿童近视的诱因，三岁以上，不要超过20分钟。</p><p>3，预防近视，避免宝宝吃高脂肪，含糖量高的食物。</p><p>4，玉米中的叶黄素和玉米黄素能阻碍紫外线中的蓝光对眼睛的伤害。</p><p>5，吃玉米去皮，玉米面，玉米糊。</p><p>6，葡萄皮中的花青素对宝宝的视力有好处。</p><p>7，对视力有益的食材：</p><p>​    DHA：亚麻籽油，深海鱼。</p><p>​    叶黄素：深色蔬菜（南瓜，玉米，西兰花）。</p><p>​    VC：彩椒，猕猴桃，樱桃，草莓。</p><p>​    维生素B族：粗粮，量控制在主食的 1/10 ~ 1/5 之间。</p><p>​    维生素A：有机猪肝或罐装猪肝泥，胡萝卜，木瓜，深色蔬菜，牛奶，鸡蛋。</p><p>8，6 ~ 12 个月推荐食谱，胡萝卜猪肝泥。</p><p>9，1 ~ 3 岁推荐食谱，水果寿司（手指粗），放入水果，鸡蛋。</p><p>10，4 ~ 6 岁推荐食谱，南瓜粥。</p><h3 id="二，问答"><a href="#二，问答" class="headerlink" title="二，问答"></a>二，问答</h3><p>1，有关补充DHA和ARA的科学比例，正确的是？</p><p>​    <strong>A）1：2</strong></p><p>​    B）2：1</p><p>​    C）1：1</p><p>2，宝宝两个月时，能记事几个小时？</p><p>​    A）12 小时</p><p>​    <strong>B）24 小时</strong></p><p>​    C）48 小时</p><p>3，小儿贫血好发于多大的宝宝？</p><p>​    A）0 - 6 个月</p><p>​    <strong>B）6 个月 - 2 岁</strong></p><p>​    C）2 - 3 岁</p><p>4，全国爱眼日是几月几日？</p><p>​    A）6 月 7 日</p><p>​    <strong>B）6 月 6 日</strong></p><p>​    C）7 月 6 日</p><p>5，婴儿最容易受凉和中暑的主要原因是？</p><p>​    A）婴儿皮肤渗透作用强</p><p>​    <strong>B）婴儿皮肤的散热和保温能力差</strong></p><p>​    C）婴儿皮肤新陈代谢快</p><p>6，眼保健操的第一节是？</p><p>​    <strong>A）揉天应穴</strong></p><p>​    B）揉四白穴</p><p>​    C）挤按睛明穴</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;拜托了妈妈 2016-07-05 期，2016-07-12 期&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;一，眼睛和近视遗传&quot;&gt;&lt;a href=&quot;#一，眼睛和近视遗传&quot; class=&quot;headerlink&quot; title=&quot;一，眼睛和近视遗
      
    
    </summary>
    
      <category term="生活" scheme="http://xuzhijun.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="生活" scheme="http://xuzhijun.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="奶爸" scheme="http://xuzhijun.github.io/tags/%E5%A5%B6%E7%88%B8/"/>
    
      <category term="近视" scheme="http://xuzhijun.github.io/tags/%E8%BF%91%E8%A7%86/"/>
    
  </entry>
  
  <entry>
    <title>奶爸笔记（十八）</title>
    <link href="http://xuzhijun.github.io/2016/08/24/life-anewfather18/"/>
    <id>http://xuzhijun.github.io/2016/08/24/life-anewfather18/</id>
    <published>2016-08-24T03:00:00.000Z</published>
    <updated>2016-08-31T13:41:26.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>拜托了妈妈 2016-06-28期</p></blockquote><h3 id="一，宝宝的生长发育"><a href="#一，宝宝的生长发育" class="headerlink" title="一，宝宝的生长发育"></a>一，宝宝的生长发育</h3><p>1，看懂生长发育曲线</p><p>2，辅食过稀会导致生长发育曲线走势趋慢</p><p>3，早期生长发育过快 长大容易引起慢性病</p><p>4，抚触按摩有益于宝宝的生理发育和情绪发育</p><p>5，最佳的抚触时间为 0 - 12个月</p><p>6，帮助哭闹的孩子进入睡眠的抚触：用拇指从大脚趾沿足弓到脚跟抚触</p><p>7，宝宝多趴有助于大运动方面的发育，要让宝宝手打开</p><p>8，要重视锻炼宝宝手指精细动作的发育</p><p>9，家长要训练孩子多口头表达意愿</p><p>10，巧妙回避孩子结巴，减缓语言发育负担</p><h3 id="二，问答"><a href="#二，问答" class="headerlink" title="二，问答"></a>二，问答</h3><p>1，早产儿肺部发育不完全，易发生的疾病是？</p><p>​    A）窒息</p><p>​    B）肺水肿</p><p>​    <strong>C）肺透明膜病</strong></p><p>2，婴儿出生时，身长约多少厘米？</p><p>​    A）45厘米左右</p><p>​    B）48厘米左右</p><p>​    <strong>C）50厘米左右</strong></p><p>3，婴儿抚触的最佳时间是？</p><p>​    <strong>A）0 - 12 个月</strong></p><p>​    B）12 - 24 个月</p><p>​    C）24 - 36 个月</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;拜托了妈妈 2016-06-28期&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;一，宝宝的生长发育&quot;&gt;&lt;a href=&quot;#一，宝宝的生长发育&quot; class=&quot;headerlink&quot; title=&quot;一，宝宝的生长发育&quot;&gt;&lt;/a&gt;一，宝宝的生长
      
    
    </summary>
    
      <category term="生活" scheme="http://xuzhijun.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="生活" scheme="http://xuzhijun.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="奶爸" scheme="http://xuzhijun.github.io/tags/%E5%A5%B6%E7%88%B8/"/>
    
      <category term="生长发育" scheme="http://xuzhijun.github.io/tags/%E7%94%9F%E9%95%BF%E5%8F%91%E8%82%B2/"/>
    
  </entry>
  
  <entry>
    <title>学习阮一峰的网页性能管理详解</title>
    <link href="http://xuzhijun.github.io/2016/08/22/web-page-performance/"/>
    <id>http://xuzhijun.github.io/2016/08/22/web-page-performance/</id>
    <published>2016-08-22T02:00:00.000Z</published>
    <updated>2016-08-22T03:17:11.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h3><p><img src="http://7xw2t4.com1.z0.glb.clouddn.com/web-page.png" alt=""></p><p>1，HTML 部分生成 <strong>DOM Tree</strong>，CSS 部分生成 <strong>Style Rules</strong>，合并成 <strong>Render Tree</strong><br>4，生成布局（<strong>layout</strong>）<br>5，绘制到屏幕上（<strong>painting</strong>）</p><h3 id="重排和重绘："><a href="#重排和重绘：" class="headerlink" title="重排和重绘："></a>重排和重绘：</h3><p>网页生成的时候，至少会渲染一次。</p><p>重新渲染 = 重新生成布局（重排 <strong>reflow</strong>）+ 重新绘制（重绘 <strong>repaint</strong>）</p><p><strong>重排必然重绘，重绘未必重排。</strong></p><p><strong>提高网页性能的根本：</strong>降低重排和重绘的频率和成本，尽量少触发重新渲染。</p><h3 id="提高性能的几个技巧："><a href="#提高性能的几个技巧：" class="headerlink" title="提高性能的几个技巧："></a>提高性能的几个技巧：</h3><p>1，JS中，从性能角度考虑，尽量不要把读操作和写操作，放在一个语句里面。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">div.style.left = div.offsetLeft + <span class="number">10</span> + <span class="string">"px"</span>;</span><br><span class="line">div.style.top = div.offsetTop + <span class="number">10</span> + <span class="string">"px"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> left = div.offsetLeft;</span><br><span class="line"><span class="keyword">var</span> top  = div.offsetTop;</span><br><span class="line">div.style.left = left + <span class="number">10</span> + <span class="string">"px"</span>;</span><br><span class="line">div.style.top = top + <span class="number">10</span> + <span class="string">"px"</span>;</span><br></pre></td></tr></table></figure><p>2，CSS动画中，尽量重绘，少用重排。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad, left 属性会造成重排+重绘，transition只会重绘。</span></span><br><span class="line">.app-menu &#123;</span><br><span class="line">  left: <span class="number">-300</span>px;</span><br><span class="line">  transition: left <span class="number">300</span>ms linear;</span><br><span class="line">&#125;</span><br><span class="line">.app-menu-open .app-menu &#123;</span><br><span class="line">  left: <span class="number">0</span>px;</span><br><span class="line">  transition: left <span class="number">300</span>ms linear;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// better,transform 属性会影响 Composite 合成阶段。</span></span><br><span class="line">.app-menu &#123;</span><br><span class="line">  -webkit-transform: translateX(<span class="number">-100</span>%);</span><br><span class="line">  transform: translateX(<span class="number">-100</span>%);</span><br><span class="line">  transition: transform <span class="number">300</span>ms linear;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.app-menu-open .app-menu &#123;</span><br><span class="line">  -webkit-transform: none;</span><br><span class="line">  transform: none;</span><br><span class="line">  transition: transform <span class="number">300</span>ms linear;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// best</span></span><br><span class="line">.app-menu &#123;</span><br><span class="line">  -webkit-transform: translateX(<span class="number">-100</span>%);</span><br><span class="line">          transform: translateX(<span class="number">-100</span>%);</span><br><span class="line">  transition: transform <span class="number">300</span>ms linear;</span><br><span class="line">  will-change: transform; <span class="comment">// 使用 will change 属性，告知浏览器变化</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/will-change" target="_blank" rel="external">MDN - will-change</a></p><p>3，样式表越简单，重排和重绘就越快。 </p><p>4，重排和重绘的DOM元素层级越高，成本就越高。 </p><p>5，table 元素的重排和重绘成本，要高于 div 元素。 </p><p>6，不要一条条地改变样式，而要通过改变 class，或者 csstext 属性，一次性地改变样式。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> left = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> top = <span class="number">10</span>;</span><br><span class="line">el.style.left = left + <span class="string">"px"</span>;</span><br><span class="line">el.style.top = top + <span class="string">"px"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good </span></span><br><span class="line">el.className += <span class="string">" theclassname"</span>;</span><br><span class="line">el.style.cssText += <span class="string">"; left: "</span> + left + <span class="string">"px; top: "</span> + top + <span class="string">"px;"</span>;</span><br></pre></td></tr></table></figure><p>6，尽量使用离线DOM，虚拟DOM的脚本库，比如React，而不是真实的网面DOM，来改变元素样式。<br>比如，<strong>操作 Document Fragment 对象</strong>，完成后再把这个对象加入DOM。<br>再比如，<strong>使用 cloneNode() 方法</strong>，在克隆的节点上进行操作，然后再用克隆的节点替换原始节点。 </p><p>7，先将元素设为display: none（需要1次重排和重绘），然后对这个节点进行100次操作，最后再恢复显示（需要1次重排和重绘）。这样一来，你就<strong>用两次重新渲染，取代了可能高达100次的重新渲染</strong>。  </p><p>只在必要的时候，才将元素的display属性为可见，因为不可见的元素不影响重排和重绘。</p><p>另外，visibility : hidden的元素只对重绘有影响，不影响重排。 </p><p>8，position 属性为 absolute 或 fixed 的元素，重排的开销会比较小，因为不用考虑它对其他元素的影响。 </p><p>9，使用 window.requestAnimationFrame()、window.requestIdleCallback() 这两个方法调节重新渲染（详见后文）。</p><h4 id="深入理解："><a href="#深入理解：" class="headerlink" title="深入理解："></a>深入理解：</h4><p><a href="https://csstriggers.com/" target="_blank" rel="external">csstriggers.com - 重绘和重排的数据</a></p><p><a href="http://www.zcfy.cc/article/smooth-as-butter-achieving-60-fps-animations-with-css3-1054.html" target="_blank" rel="external">如丝般顺滑：使用 CSS3 实现 60 帧的动画</a></p><h3 id="刷新率"><a href="#刷新率" class="headerlink" title="刷新率"></a>刷新率</h3><p>如果网页动画能够做到每秒60帧，就会跟显示器同步刷新，达到最佳的视觉效果。</p><p>这意味着，<strong>一秒之内进行60次重新渲染（60 FPS），每次重新渲染的时间不能超过16.66毫秒</strong>。</p><p>如果想达到 60 帧的刷新率，就意味着 JavaScript 线程每个任务的耗时，必须少于16毫秒。</p><p>一个解决办法是使用 Web Worker，主线程只用于 UI 渲染，然后跟UI渲染不相干的任务，都放在 Worker 线程。</p><h4 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h4><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Workers_API/Using_web_workers" target="_blank" rel="external">使用 Web Workers</a></p><h3 id="Chrome的Timeline"><a href="#Chrome的Timeline" class="headerlink" title="Chrome的Timeline"></a>Chrome的Timeline</h3><p>Timeline面板提供两种查看方式：横条的是”事件模式”（Event Mode），显示重新渲染的各种事件所耗费的时间；竖条的是”帧模式”（Frame Mode），显示每一帧的时间耗费在哪里。<br>事件模式：<br>哪种色块比较多，就说明性能耗费在那里。色块越长，问题越大。<br>帧模式：<br>用来查看单个帧的耗时情况。每帧的色柱高度越低越好，表示耗时少。<br>帧模式有两条水平的参考线。<br>下面的一条是60FPS，低于这条线，可以达到每秒60帧；<br>上面的一条是30FPS，低于这条线，可以达到每秒30次渲染。<br>如果色柱都超过30FPS，这个网页就有性能问题了。</p><h3 id="window-requestAnimationFrame"><a href="#window-requestAnimationFrame" class="headerlink" title="window.requestAnimationFrame()"></a>window.requestAnimationFrame()</h3><p>它可以将某些代码放到下一次重新渲染时执行。<br>可以使用window.requestAnimationFrame()，让读操作和写操作分离，把所有的写操作放到下一次重新渲染。 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doubleHeight</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> currentHeight = element.clientHeight;</span><br><span class="line">  element.style.height = (currentHeight * <span class="number">2</span>) + \<span class="string">'px\';</span></span><br><span class="line"><span class="string">&#125; </span></span><br><span class="line"><span class="string">elements.forEach(doubleHeight); </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 优化 </span></span><br><span class="line"><span class="string">function doubleHeight(element) &#123; </span></span><br><span class="line"><span class="string">  var currentHeight = element.clientHeight; </span></span><br><span class="line"><span class="string">// 使用window.requestAnimationFrame()，让读操作和写操作分离，把所有的写操作放到下一次重新渲染。 </span></span><br><span class="line"><span class="string">  window.requestAnimationFrame(function () &#123;</span></span><br><span class="line"><span class="string">    element.style.height = (currentHeight * 2) + \'px\';</span></span><br><span class="line"><span class="string">  &#125;);</span></span><br><span class="line"><span class="string">&#125; </span></span><br><span class="line"><span class="string">elements.forEach(doubleHeight);</span></span><br></pre></td></tr></table></figure><p>页面滚动事件（scroll）的监听函数，就很适合用 window.requestAnimationFrame() ，推迟到下一次重新渲染。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">window</span>).on(<span class="string">'scroll'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="built_in">window</span>.requestAnimationFrame(scrollHandler);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>最适用的场合还是网页动画。下面是一个旋转动画的例子，元素每一帧旋转1度。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> rAF = <span class="built_in">window</span>.requestAnimationFrame;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> degrees = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">update</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">document</span>.body.style.transform = <span class="string">"rotate("</span> + degrees + <span class="string">"deg)"</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'updated to degrees '</span> + degrees);</span><br><span class="line">  degrees = degrees + <span class="number">1</span>;</span><br><span class="line">  rAF(update);</span><br><span class="line">&#125;</span><br><span class="line">rAF(update);</span><br></pre></td></tr></table></figure><h4 id="深入理解：-1"><a href="#深入理解：-1" class="headerlink" title="深入理解："></a>深入理解：</h4><p><a href="http://www.zhangxinxu.com/wordpress/?p=3695" target="_blank" rel="external">CSS3动画那么强，requestAnimationFrame还有毛线用？</a></p><p><a href="http://www.cnblogs.com/Wayou/p/requestAnimationFrame.html" target="_blank" rel="external">requestAnimationFrame，Web中写动画的另一种选择</a></p><p><a href="http://creativejs.com/resources/requestanimationframe/" target="_blank" rel="external">creative JS - requestAnimationFrame</a></p><p><a href="https://gist.github.com/joelambert/1002116" target="_blank" rel="external">https://gist.github.com/joelambert/1002116</a></p><p><a href="http://www.cnblogs.com/chaogex/p/3960175.html" target="_blank" rel="external">深入理解requestAnimationFrame</a></p><h3 id="window-requestIdleCallback"><a href="#window-requestIdleCallback" class="headerlink" title="window.requestIdleCallback()"></a>window.requestIdleCallback()</h3><p>它指定只有当一帧的末尾有空闲时间，才会执行回调函数。<br>1，只有当前帧的运行时间小于16.66ms时，函数fn才会执行。否则，就推迟到下一帧，如果下一帧也没有空闲时间，就推迟到下下一帧，以此类推。 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">requestIdleCallback(fn);</span><br></pre></td></tr></table></figure><p>2，<strong>它还可以接受第二个参数，表示指定的毫秒数</strong>。如果在指定的这段时间之内，每一帧都没有空闲时间，那么函数fn将会强制执行。 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">requestIdleCallback(fn, <span class="number">5000</span>); <span class="comment">//函数fn最迟会在5000毫秒之后执行。</span></span><br></pre></td></tr></table></figure><p>3，函数 fn 可以接受一个 deadline 对象作为参数。 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">requestIdleCallback(<span class="function"><span class="keyword">function</span> <span class="title">someHeavyComputation</span>(<span class="params">deadline</span>) </span>&#123; </span><br><span class="line">  <span class="comment">// 只要当前帧还有空闲时间，就不断调用doWorkIfNeeded方法。</span></span><br><span class="line">  <span class="keyword">while</span>(deadline.timeRemaining() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    doWorkIfNeeded();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 一旦没有空闲时间，但是任务还没有全执行，就分配到下一轮requestIdleCallback。 </span></span><br><span class="line">  <span class="keyword">if</span>(thereIsMoreWorkToDo) &#123;</span><br><span class="line">    requestIdleCallback(someHeavyComputation);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="deadline-对象"><a href="#deadline-对象" class="headerlink" title="deadline 对象"></a>deadline 对象</h4><p>回调函数 someHeavyComputation 的参数是一个 <strong>deadline 对象</strong>。<br>deadline 对象有一个方法和一个属性：<strong>timeRemaining()</strong> 和 <strong>didTimeout</strong>。 </p><h5 id="timeRemaining-方法"><a href="#timeRemaining-方法" class="headerlink" title="timeRemaining() 方法"></a>timeRemaining() 方法</h5><p>timeRemaining() 方法返回当前帧还剩余的毫秒。<br>这个方法只能读，不能写，而且会动态更新。<br>因此可以不断检查这个属性，如果还有剩余时间的话，就不断执行某些任务。<br>一旦这个属性等于0，就把任务分配到下一轮requestIdleCallback。</p><h5 id="didTimeout-属性"><a href="#didTimeout-属性" class="headerlink" title="didTimeout 属性"></a>didTimeout 属性</h5><p>deadline 对象的 didTimeout 属性会返回一个布尔值，表示指定的时间是否过期。<br>这意味着，如果回调函数由于指定时间过期而触发，那么你会得到两个结果。<br>1，timeRemaining 方法返回 0<br>2，didTimeout 属性等于true<br><strong>如果回调函数执行了，无非是两种原因：当前帧有空闲时间，或者指定时间到了。</strong> </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myNonEssentialWork</span> (<span class="params">deadline</span>) </span>&#123; </span><br><span class="line">  <span class="keyword">while</span> ((deadline.timeRemaining() &gt; <span class="number">0</span> || deadline.didTimeout) &amp;&amp; tasks.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    doWorkIfNeeded(); </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (tasks.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    requestIdleCallback(myNonEssentialWork); </span><br><span class="line">  &#125;</span><br><span class="line">&#125; </span><br><span class="line">requestIdleCallback(myNonEssentialWork, <span class="number">5000</span>);</span><br></pre></td></tr></table></figure><p>doWorkIfNeeded 函数一定会在将来某个比较空闲的时间（或者在指定时间过期后）得到反复执行。 </p><h4 id="深入理解：-2"><a href="#深入理解：-2" class="headerlink" title="深入理解："></a>深入理解：</h4><p><a href="https://zhuanlan.zhihu.com/p/20273185" target="_blank" rel="external">requestIdleCallback 与前端渲染卡顿</a></p><p><a href="https://developers.google.com/web/updates/2015/08/using-requestidlecallback" target="_blank" rel="external">Using requestIdleCallback</a></p><h3 id="参考：-1"><a href="#参考：-1" class="headerlink" title="参考："></a>参考：</h3><p><a href="http://www.ruanyifeng.com/blog/2015/09/web-page-performance-in-depth.html" target="_blank" rel="external">阮一峰 - 网页性能管理详解</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;原理：&quot;&gt;&lt;a href=&quot;#原理：&quot; class=&quot;headerlink&quot; title=&quot;原理：&quot;&gt;&lt;/a&gt;原理：&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://7xw2t4.com1.z0.glb.clouddn.com/web-page.png&quot; alt=
      
    
    </summary>
    
      <category term="前端" scheme="http://xuzhijun.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="http://xuzhijun.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>前端面试的一些知识点(JavaScript) - this，作用域，闭包</title>
    <link href="http://xuzhijun.github.io/2016/08/10/frontend-knowledge3/"/>
    <id>http://xuzhijun.github.io/2016/08/10/frontend-knowledge3/</id>
    <published>2016-08-10T08:00:00.000Z</published>
    <updated>2017-12-26T13:00:50.949Z</updated>
    
    <content type="html"><![CDATA[<h3 id="this"><a href="#this" class="headerlink" title="this"></a>this</h3><p>###闭包：什么是闭包？</p><p><a href="http://www.zcfy.cc/article/master-the-javascript-interview-what-is-a-closure-2127.html" target="_blank" rel="external">征服 JavaScript 面试：什么是闭包？| Eric Elliott</a></p><p>你不仅仅应该了解闭包的机制，更应该了解闭包为什么很重要，以及能够很容易地回答出闭包的几种可能的应用场景。</p><p>JavaScript 里的函数能访问它们的：<br>1，<strong>this</strong> 和 <strong>arguments</strong><br>2，<strong>局部变量</strong>和<strong>函数</strong><br>3，<strong>外部函数的变量</strong>和<strong>函数</strong><br>4，<strong>全部变量</strong>（包括DOM）</p><h4 id="闭包的产生"><a href="#闭包的产生" class="headerlink" title="闭包的产生"></a>闭包的产生</h4><p>函数被创建时其实就产生了<strong>闭包</strong>，通常我们将一个函数定义在另一个函数内部，称这个内部函数为<strong>闭包</strong>。</p><h4 id="闭包的特点"><a href="#闭包的特点" class="headerlink" title="闭包的特点"></a>闭包的特点</h4><p>JavaScript 采用了词法作用域，当<strong>闭包</strong>被传递到所在的词法作用域以外执行，它都会持有对原始定义作用域的引用，即使外部函数已经执行完毕，仍可通过<strong>闭包</strong>访问到外部函数作用域中的变量。</p><h4 id="闭包的使用"><a href="#闭包的使用" class="headerlink" title="闭包的使用"></a>闭包的使用</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不用 return 的闭包</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">closureExample</span>(<span class="params">objID, text, timedelay</span>) </span>&#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">//  全局方法 window.setTimeout 持有了闭包。</span></span><br><span class="line">    <span class="built_in">document</span>.getElementById(objID).innerHTML = text; </span><br><span class="line">  &#125;, timedelay);</span><br><span class="line">&#125; </span><br><span class="line">closureExample(‘myDiv’, ‘Closure is created’, <span class="number">500</span>);</span><br></pre></td></tr></table></figure><p><strong>例子一：</strong>闭包中的局部变量是引用而非拷贝</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> tmp = <span class="number">3</span>;</span><br><span class="line">  <span class="keyword">var</span> func = <span class="function"><span class="keyword">function</span>(<span class="params">y</span>) </span>&#123;</span><br><span class="line">    alert(x + y + tmp);</span><br><span class="line">  &#125;</span><br><span class="line">  tmp++;</span><br><span class="line">  <span class="keyword">return</span> func;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bar = foo(<span class="number">2</span>);<span class="comment">// x=2, y=10, tmp=4</span></span><br><span class="line">bar(<span class="number">10</span>); <span class="comment">// 16</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">say667</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Local variable that ends up within closure</span></span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">666</span>;</span><br><span class="line">    <span class="keyword">var</span> sayAlert = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; alert(num); &#125;</span><br><span class="line">    num++;</span><br><span class="line">    <span class="keyword">return</span> sayAlert;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sayAlert = say667();</span><br><span class="line">sayAlert();</span><br></pre></td></tr></table></figure><p><strong>例子二：</strong>多个闭包绑定同一个外部函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gAlertNumber, gIncreaseNumber, gSetNumber;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setupSomeGlobals</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Local variable that ends up within closure</span></span><br><span class="line">  <span class="keyword">var</span> num = <span class="number">666</span>;</span><br><span class="line">  <span class="comment">// Store some references to functions as global variables</span></span><br><span class="line">  gAlertNumber = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; alert(num); &#125;</span><br><span class="line">  gIncreaseNumber = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; num++; &#125;</span><br><span class="line">  gSetNumber = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123; num = x; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setupSomeGlobals(); <span class="comment">// 为三个全局变量赋值</span></span><br><span class="line">gAlertNumber(); <span class="comment">//666</span></span><br><span class="line">gIncreaseNumber();</span><br><span class="line">gAlertNumber(); <span class="comment">// 667</span></span><br><span class="line">gSetNumber(<span class="number">12</span>);<span class="comment">//</span></span><br><span class="line">gAlertNumber();<span class="comment">//12</span></span><br></pre></td></tr></table></figure><p><strong>例子三：</strong>当在一个循环中赋值函数时，这些函数将绑定同样的闭包</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">buildList</span>(<span class="params">list</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> result = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; list.length; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> item = <span class="string">'item'</span> + list[i];</span><br><span class="line">    <span class="built_in">console</span>.log(item);</span><br><span class="line">    result.push( <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;alert(item + <span class="string">' '</span> + list[i])&#125; );</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testList</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> fnlist = buildList([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; fnlist.length; j++) &#123;</span><br><span class="line">    fnlist[j]();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">testList();</span><br></pre></td></tr></table></figure><h5 id="解读："><a href="#解读：" class="headerlink" title="解读："></a>解读：</h5><p>我的理解，循环中定义的 <strong><em>item</em></strong> 和 <strong><em>i</em></strong> 实际上在外部函数 <strong><em>buildList</em></strong> 作用域下，不是循环体中的块级作用域。</p><p>当 <strong><em>buildList</em></strong> 执行完毕后，最后一次循环使得 <strong><em>item</em></strong> 的值为 <strong>item3</strong>，跳出循环后 <strong><em>i</em></strong> 的值为 <strong>4</strong>，而 <strong><em>list[4]</em></strong> 的值为 <strong>undefined</strong>。</p><h5 id="修正："><a href="#修正：" class="headerlink" title="修正："></a>修正：</h5><p>方法一：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 循环体中使用了 let 定义块级变量 i 和 item。</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">buildList</span>(<span class="params">list</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; list.length; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> item = <span class="string">'item'</span> + list[i];</span><br><span class="line">        result.push( <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;alert(item + <span class="string">' '</span> + list[i])&#125; );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testList</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> fnlist = buildList([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; fnlist.length; j++) &#123;</span><br><span class="line">        fnlist[j]();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">testList();</span><br></pre></td></tr></table></figure><p>方法二：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过IIFE传参的方式，把外部函数的变量闭包</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">buildList</span>(<span class="params">list</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> result = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; list.length; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> item = <span class="string">'item'</span> + list[i];</span><br><span class="line">    result.push(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(a + <span class="string">' '</span> + b)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;(item, list[i]));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testList</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> fnlist = buildList([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; fnlist.length; j++) &#123;</span><br><span class="line">    fnlist[j]();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">testList();</span><br></pre></td></tr></table></figure><h4 id="闭包的应用场景"><a href="#闭包的应用场景" class="headerlink" title="闭包的应用场景"></a>闭包的应用场景</h4><p><strong>初级应用场景：</strong>在<strong>事件处理</strong>和<strong>回调函数</strong>中也常常会用到它。</p><p><strong>高级应用场景：</strong>此外还有<strong>偏函数应用（partial applications）</strong>和<strong>柯里化（currying）</strong>，以及其他函数式编程模式。</p><p><strong><em>如果你不能回答这个问题，你只是个初级开发者。不管你实际上已经干这个多久了。</em></strong></p><h4 id="闭包的应用场景（一）：对象中数据的私有化（返回对象）"><a href="#闭包的应用场景（一）：对象中数据的私有化（返回对象）" class="headerlink" title="闭包的应用场景（一）：对象中数据的私有化（返回对象）"></a>闭包的应用场景（一）：对象中数据的私有化（返回对象）</h4><p>当你使用闭包来实现数据私有化时，被封装的变量只能在闭包容器函数作用域中使用。</p><p>只有定义在闭包作用域中的方法才可以访问这些数据。</p><h4 id="闭包的应用场景（二）：创建有状态的函数（返回函数）"><a href="#闭包的应用场景（二）：创建有状态的函数（返回函数）" class="headerlink" title="闭包的应用场景（二）：创建有状态的函数（返回函数）"></a>闭包的应用场景（二）：创建有状态的函数（返回函数）</h4><p>闭包可以用来在一个函数与一组“私有”变量之间创建关联关系。在给定函数被多次调用的过程中，这些私有变量能够保持其<strong>持久性</strong>。<br><strong>变量的作用域仅限于包含它们的函数</strong>，因此无法从其它程序代码部分进行访问。<br>不过，<strong>变量的生命周期是可以很长</strong>，在一次函数调用期间所创建所生成的值在下次函数调用时仍然存在。<br>正因为这一特点，<strong><em>闭包可以用来完成信息隐藏，并进而应用于需要状态表达的某些编程范型中</em></strong>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Return a function that approximates the derivative of f</span></span><br><span class="line"><span class="comment">// using an interval of dx, which should be appropriately small.</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">derivative</span>(<span class="params">f,  dx</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span>  <span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (f(x + dx) - f(x)) / dx;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>debounce 防抖函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将会包装事件的 debounce 函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">fn, delay</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 维护一个 timer</span></span><br><span class="line">  <span class="keyword">let</span> timer = <span class="literal">null</span>;</span><br><span class="line">  <span class="comment">// 能访问 timer 的闭包</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 通过 ‘this’ 和 ‘arguments’ 获取函数的作用域和变量</span></span><br><span class="line">    <span class="keyword">let</span> context = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">let</span> args = <span class="built_in">arguments</span>;</span><br><span class="line">    <span class="comment">// 如果事件被调用，清除 timer 然后重新设置 timer</span></span><br><span class="line">    clearTimeout(timer);</span><br><span class="line">    timer = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      fn.apply(context, args);</span><br><span class="line">    &#125;, delay);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 当用户滚动时被调用的函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'You are scrolling!'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 在 debounce 中包装我们的函数，过 2 秒触发一次</span></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'scroll'</span>, debounce(foo, <span class="number">2000</span>));</span><br></pre></td></tr></table></figure><p>throttle 节流函数</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;this&quot;&gt;&lt;a href=&quot;#this&quot; class=&quot;headerlink&quot; title=&quot;this&quot;&gt;&lt;/a&gt;this&lt;/h3&gt;&lt;p&gt;###闭包：什么是闭包？&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.zcfy.cc/article/master
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://xuzhijun.github.io/categories/JavaScript/"/>
    
    
      <category term="前端面试" scheme="http://xuzhijun.github.io/tags/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
</feed>
